[{"content":"","date":null,"permalink":"https://hugovk.dev/blog/","section":"Blog","summary":"","title":"Blog"},{"content":"For the duration of 2025, I\u0026rsquo;m thrilled to join the Sovereign Tech Fellowship for Maintainers!\nThis is a pilot programme from the Sovereign Tech Agency to pay maintainers of critical open source technologies in the public interest.\nI\u0026rsquo;m one of six participants in this first cohort and I\u0026rsquo;ll be working on Python, with a focus on CPython, including as release manager for Python 3.14 (under development with full release due in October 2025, supported until 2030) and the next one (development starts in May 2025 for release in October 2026, supported until 2031).\nI\u0026rsquo;m delighted to work with the Sovereign Tech Agency as they really get open source. Supported by Germany\u0026rsquo;s Ministry for Economic Affairs and Climate Action, they recognise the importance of open source and its place as critical digital infrastructure in the public interest. In their own words:\nThe Sovereign Tech Agency supports the development, improvement, and maintenance of open digital infrastructure. Our goal is to sustainably strengthen the open source ecosystem. We focus on security, resilience, technological diversity, and the people behind the code.\nWe often don’t notice how much our lives depend on digital infrastructure until it stops working. But making it available, accessible and secure is key for digitalization in the public interest. The Sovereign Tech Agency invests in open digital infrastructure. It is critical for innovation and economic growth, and forms the foundation for digitalization across sectors.\nIn addition to CPython core development and release management, I\u0026rsquo;ll continue to maintain other Python projects such as Pillow, humanize and termcolor, and CLI utilities such as norwegianblue, pypistats and pepotron, and help out more widely in the Python ecosystem.\nTasks include:\nBug fixing, issue triaging, PR review and security improvements Mentoring new contributors to foster community growth and diversity Communicating updates to the wider community via blog posts and social media Workflow, CI, and infrastructure optimisations to streamline core development tasks Maintenance and improvement of PEP editing infrastructure and related documentation tools Automation and dashboard creation for triage scripts to assist other contributors Process and workflow improvements for CI and core contributor environments Ongoing documentation enhancements, including hosting monthly Documentation Working Group meetings, improving build processes, and focusing on accessibility Updating and modernising projects for compatibility with the latest Python versions Implementing stronger security measures and using Trusted Publishing and digital attestations Adding and maintaining Python support for widely used PyPI packages Improving community-wide tooling, documentation, and accessibility Meet my fellow Sovereign Tech Fellows, and by the way, the Sovereign Tech Agency is currently hiring, check out their open positions.\n","date":"6 February 2025","permalink":"https://hugovk.dev/blog/2025/im-excited-to-join-the-sovereign-tech-fellowship/","section":"Blog","summary":"","title":"I'm excited to join the Sovereign Tech Fellowship"},{"content":"","date":null,"permalink":"https://hugovk.dev/","section":"Hugo van Kemenade","summary":"","title":"Hugo van Kemenade"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/linter/","section":"tags","summary":"","title":"linter"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/prek/","section":"tags","summary":"","title":"prek"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/python/","section":"tags","summary":"","title":"python"},{"content":"I\u0026rsquo;ve been using prek recently as a drop-in replacement for pre-commit.\nIt uses uv for managing Python virtual environments and dependencies, is rewritten in Rust (because of course) and uses the same .pre-commit-config.yaml as pre-commit.\nIts homepage says it\u0026rsquo;s not yet production ready, but several projects like Apache Airflow and PDM are already using it. I\u0026rsquo;ve been using it for a while and reporting issues as I find them; the maintainer is quick with fixes and releases. All the hooks I need are now supported.\nGetting started #First install using one of the many methods, then:\ncd my-repo pre-commit uninstall # remove the old hooks prek install # install the new hooks prek run --all-files # run all lints on all files git commit -m \u0026#34;my commit\u0026#34; # run on the changed files in a commit Benchmarks #prek is noticeably quicker at installing hooks.\n⚡ About 10x faster than pre-commit and uses only a third of disk space. This 10x is a comparison of installing hooks using the excellent hyperfine benchmarking tool.\nHere\u0026rsquo;s my own comparison.\nIn the first test, I initially ran pre-commit clean or prek clean to clear their caches. I then ran each tool with run --all-files in serial on the 126 repos I have cloned right now, 84 of which have a .pre-commit-config.yaml file. Each then downloads and installs the hooks when needed, then runs the lint tools.\nSecond, because running the lint tools should be independent and constant time for both tools, the next test ran install-hooks instead of run --all files.\nTo get an idea of the amount of work for these two tests, pre-commit reported initialising environments 217 times.\nFinally, let\u0026rsquo;s run hyperfine on the Pillow config, which installs hooks from 14 repos:\n❯ hyperfine \\ --prepare \u0026#39;rm -rf ~/.cache/prek/ \u0026amp;\u0026amp; rm -rf ~/.cache/pre-commit \u0026amp;\u0026amp; rm -rf ~/.cache/uv\u0026#39; \\ --setup \u0026#39;prek --version \u0026amp;\u0026amp; pre-commit --version\u0026#39; \\ \u0026#39;prek install-hooks\u0026#39; \\ \u0026#39;pre-commit install-hooks\u0026#39; Results # pre-commit prek Times faster run --all-files 17m13s 7m59s 2.16 install-hooks 10m48s 2m24s 4.50 hyperfine 39.841s 5.539s 7.19 The hyperfine results:\nBenchmark 1: prek install-hooks Time (mean ± σ): 5.539 s ± 0.176 s [User: 8.973 s, System: 5.692 s] Range (min … max): 5.231 s … 5.834 s 10 runs Benchmark 2: pre-commit install-hooks Time (mean ± σ): 39.841 s ± 2.017 s [User: 19.760 s, System: 8.203 s] Range (min … max): 36.930 s … 43.976 s 10 runs Summary prek install-hooks ran 7.19 ± 0.43 times faster than pre-commit install-hooks Give it a try and give it a ⭐!\nBonus #These are the aliases I have set for pre-commit and prek:\nalias pci=\u0026#34;pre-commit install --allow-missing-config\u0026#34; alias pcu=\u0026#34;pre-commit uninstall\u0026#34; alias pca=\u0026#34;pre-commit autoupdate --jobs 0\u0026#34; alias pcr=\u0026#34;pre-commit run --all-files\u0026#34; alias pki=\u0026#34;prek install --allow-missing-config\u0026#34; alias pku=\u0026#34;prek uninstall\u0026#34; alias pka=\u0026#34;prek autoupdate --jobs 0\u0026#34; alias pkr=\u0026#34;prek run --all-files\u0026#34; Where:\ninstall\u0026rsquo;s --allow-missing-config prevents failing with an error code when a repo has no config file autoupdate\u0026rsquo;s --jobs 0 uses all the available threads to make it faster Header photo: AH-1G Aircraft Maintenance Test Flight Handbook and handwritten checklist for helicopters in the San Diego Air and Space Museum Archive, with no known copyright restrictions.\n","date":"6 September 2025","permalink":"https://hugovk.dev/blog/2025/ready-prek-go/","section":"Blog","summary":"","title":"Ready prek go!"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/","section":"tags","summary":"","title":"tags"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/testing/","section":"tags","summary":"","title":"testing"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/2025/","section":"tags","summary":"","title":"2025"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/europython/","section":"tags","summary":"","title":"europython"},{"content":"Some out-of-context quotes:\n\u0026ldquo;We can just bump the version and move on.\u0026rdquo; \u0026ndash; Dr. Brett Cannon \u0026ldquo;You just show up. That’s it.\u0026rdquo; \u0026ndash; Rodrigo Girão Serrão \u0026ldquo;If it kwargs like a dorg, it\u0026rsquo;s a dorg.\u0026rdquo; \u0026ndash; Sebastián Ramírez \u0026ldquo;Our job will be to put the human in.\u0026rdquo; \u0026ndash; Paul Everitt 20 July 2025\nIs AI Leaving the Python Community Behind? by Georgi Ker 21 July 2025\nEuroPython 2025 in Prague Recap by Will Vincent\nTýdenní poznámky: Natáčení promo videa a EuroPython by Honza Javorek\n23 July 2025\nFirst EuroPython by Raffaella Suardini 24 July 2025\nEuroPython 2025 Recap by Cheuk Ting Ho 11 August 2025\nPersonal highlights of EuroPython 2025 by Rodrigo Girão Serrão 12 August 2025\nEuroPython 2025: “I came for the language, but stayed for the community” by Jürgen Gmach 17 August 2025\nPyLadies, PacMan, and Public Health by Gauden Galea 21 August 2025\nEuroPython 2025開幕までの道のり⁠⁠、Day 1の注目セッション by Takanori Suzuki And a bunch of LinkedIn posts:\nAlicja Kocieniewska Diego Russo Ece Akdeniz Jodie Burchell Kseniia Usyk Lara Krämer Libor Vaněk Marco Richetta Olena Yefymenko Vassiliki Dalakiari Finally, the official photos and videos should be up soon, and here are my photos.\nUpdate #2025-09-06: Added Gauden Galea\u0026rsquo;s writeup.\nHeader photo: Savannah Bailey\u0026rsquo;s keynote (CC BY-NC-SA 2.0 Hugo van Kemenade).\n","date":"25 August 2025","permalink":"https://hugovk.dev/blog/2025/europython-2025-a-roundup-of-writeups/","section":"Blog","summary":"","title":"EuroPython 2025: A roundup of writeups"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/pycon/","section":"tags","summary":"","title":"pycon"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/coverage/","section":"tags","summary":"","title":"coverage"},{"content":"I recommend running coverage on your tests.\nHere\u0026rsquo;s a couple of reasons why, from the past couple of months.\nExample one #When writing tests, it\u0026rsquo;s common to copy and paste test functions, but sometimes you forget to rename the new one (see also: the Last Line Effect).\nFor example:\ndef test_get_install_to_run_with_platform(patched_installs): i = installs.get_install_to_run(\u0026#34;\u0026lt;none\u0026gt;\u0026#34;, None, \u0026#34;1.0-32\u0026#34;) assert i[\u0026#34;id\u0026#34;] == \u0026#34;PythonCore-1.0-32\u0026#34; assert i[\u0026#34;executable\u0026#34;].match(\u0026#34;python.exe\u0026#34;) i = installs.get_install_to_run(\u0026#34;\u0026lt;none\u0026gt;\u0026#34;, None, \u0026#34;2.0-arm64\u0026#34;) assert i[\u0026#34;id\u0026#34;] == \u0026#34;PythonCore-2.0-arm64\u0026#34; assert i[\u0026#34;executable\u0026#34;].match(\u0026#34;python.exe\u0026#34;) def test_get_install_to_run_with_platform(patched_installs): i = installs.get_install_to_run(\u0026#34;\u0026lt;none\u0026gt;\u0026#34;, None, \u0026#34;1.0-32\u0026#34;, windowed=True) assert i[\u0026#34;id\u0026#34;] == \u0026#34;PythonCore-1.0-32\u0026#34; assert i[\u0026#34;executable\u0026#34;].match(\u0026#34;pythonw.exe\u0026#34;) i = installs.get_install_to_run(\u0026#34;\u0026lt;none\u0026gt;\u0026#34;, None, \u0026#34;2.0-arm64\u0026#34;, windowed=True) assert i[\u0026#34;id\u0026#34;] == \u0026#34;PythonCore-2.0-arm64\u0026#34; assert i[\u0026#34;executable\u0026#34;].match(\u0026#34;pythonw.exe\u0026#34;) The tests pass, but the first one is never run because its name is redefined. This clearly shows up as a non-run test in the coverage report. In this case, we only need to rename one of them, and both are covered and pass.\nBut sometimes there\u0026rsquo;s a bug in the test which would cause it to fail, but we just don\u0026rsquo;t know because it\u0026rsquo;s not run.\nTip 1: This can also be found by Ruff\u0026rsquo;s F811 rule. Tip 2: pytest\u0026rsquo;s parametrize is a great way to combine similar test functions with different input data. Example two #This is more subtle:\nim = Image.new(\u0026#34;RGB\u0026#34;, (1, 1)) for colors in ((\u0026#34;#f00\u0026#34;,), (\u0026#34;#f00\u0026#34;, \u0026#34;#0f0\u0026#34;)): append_images = (Image.new(\u0026#34;RGB\u0026#34;, (1, 1), color) for color in colors) im_reloaded = roundtrip(im, save_all=True, append_images=append_images) assert_image_equal(im, im_reloaded) assert isinstance(im_reloaded, MpoImagePlugin.MpoImageFile) assert im_reloaded.mpinfo is not None assert im_reloaded.mpinfo[45056] == b\u0026#34;0100\u0026#34; for im_expected in append_images: im_reloaded.seek(im_reloaded.tell() + 1) assert_image_similar(im_reloaded, im_expected, 1) It\u0026rsquo;s not so obvious when looking at the code, but Codecov highlights a problem:\nThe append_images generator is being consumed inside roundtrip(), so we have nothing to iterate over in the for loop \u0026ndash; hence no coverage. The fix is to use a list instead of a generator.\nHeader photo: Misplaced manhole cover (CC BY-NC-SA 2.0 Hugo van Kemenade).\n","date":"27 June 2025","permalink":"https://hugovk.dev/blog/2025/run-coverage-on-tests/","section":"Blog","summary":"","title":"Run coverage on tests"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/etymology/","section":"tags","summary":"","title":"etymology"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/history/","section":"tags","summary":"","title":"history"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/pep/","section":"tags","summary":"","title":"PEP"},{"content":"PEPs #Here\u0026rsquo;s Barry Warsaw on the origin of PEPs, or Python Enhancement Proposals (edited from PyBay 2017):\nI like backronyms. For those who don\u0026rsquo;t know: a backronym is where you come up with the acronym first and then you come up with the thing that the acronym stands for. And I like funny sounding words, like FLUFL was one of those. When we were working for CNRI, they also ran the IETF conferences. The IETF is the Internet Engineering Task Force, and they\u0026rsquo;re the ones who come up with the RFCs. If you look at RFC 822, it defines what an email message looks like.\nWe got to a point, because we were at CNRI we were more intimately involved in the IETF and how they do standards and things, we observed at the time that there were so many interesting ideas coming in being proposed for Python that Guido really just didn\u0026rsquo;t have time to dive into the details of everything.\nSo I thought: well, we have this RFC process, let\u0026rsquo;s try to mirror some of that so that we can capture the essence of an idea in a document that would serve as a point of discussion, and that Guido could let people discuss and then come in and read the summary of the discussion.\nAnd I was just kind of thinking: well, PEPs, that\u0026rsquo;s kind of peppy, it\u0026rsquo;s kind of a funny sounding word. I came up with the word and then I backronymed it into Python Enhancement Proposal. And then I wrote PEP 0 and PEP 1. PEP 0 was originally handwritten, and so I was the first PEP author because I came up with the name PEP.\nBut the really interesting thing is that you see the E.P. part used in a lot of other places, like Debian has DEPs now. There\u0026rsquo;s a lot of other communities that have these enhancement proposals so it\u0026rsquo;s kind of interesting. And then the format of the PEP was directly from that idea of the RFC\u0026rsquo;s standard.\n\u0026amp; Co. #Here\u0026rsquo;s a collection of enhancement proposals from different communities.\nAcronym Name AIP Airflow Improvement Proposals AIP API Improvement Proposals APE Astropy Proposals for Enhancement BIP Bitcoin Improvement Proposals CEP Conda Enhancement Proposals CFEP conda-forge\u0026rsquo;s Enhancement Proposals DEP Debian Enhancement Proposals DEP Django Enhancement Proposals FEP Fediverse Enhancement Proposals GLEP Gentoo Linux Enhancement Proposal IPEP IPython Enhancement Proposals JEP JDK Enhancement Proposals JEP JMESPath Enhancement Proposals JEP Jupyter Enhancement Proposals KEP Kubernetes Enhancement Proposals NEP NumPy Enhancement Proposals PEEP Pipenv Enhancement Proposals PEP Python Enhancement Proposals SKIP scikit-image proposals SLEP Scikit-learn enhancement proposals SPEC Scientific Python Ecosystem Coordination TIP Tcl Improvement Proposals WEP Write the Docs Enhancement Proposals XEP XMPP Extension Protocols YTEP yt Enhancement Proposals Are there more? Let me know!\nHeader photo: Grand Grocery Co., Lincoln, Nebraska, USA (1942) by The Library of Congress, with no known copyright restrictions.\n","date":"14 May 2025","permalink":"https://hugovk.dev/blog/2025/peps-and-co/","section":"Blog","summary":"","title":"PEPs \u0026 Co."},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/rfc/","section":"tags","summary":"","title":"RFC"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/cli/","section":"tags","summary":"","title":"CLI"},{"content":"Following Jeff Triplett\u0026rsquo;s lead, here\u0026rsquo;s a list of my most used terminal commands.\nNo. Total Command Info 1. 1239 rg ripgrep 2. 1038 c aliased to pycharm 3. 847 gc aliased to git commit --verbose via Oh My Zsh Git plugin 4. 559 gco aliased to git checkout 5. 518 git 6. 384 ./python.exe Python built from source on macOS 7. 365 cd 8. 359 cat aliased to bat -p 9. 336 gs aliased to scmpuff_status via scmpuff to give numeric shortcuts for files 10. 326 gl aliased to git log via Oh My Zsh Git plugin 11. 315 gb aliased to git branch via Oh My Zsh Git plugin 12. 308 p aliased to python 13. 263 ga aliased to git add via Oh My Zsh Git plugin 14. 227 l aliased to ls -lah 15. 214 uv Python package manager 16. 203 f aliased to find . | rg (TODO: learn fd) 17. 189 python 18. 175 gd aliased to git diff via Oh My Zsh Git plugin 19. 174 rm 20. 165 em the CLI emoji keyboard 21. 164 gh aliased to GH_PAGER=\u0026quot;less -FRX\u0026quot; gh, mostly for gh co \u0026lt;PR number\u0026gt;, sometimes gh cache delete --all 22. 145 open 23. 120 mv 24. 120 make for building Python, docs, devguide and PEPs 25. 117 cp 26. 116 tox 27. 116 pypi see below 28. 111 bc aliased to /usr/local/bin/bcompare Beyond Compare diff tool 29. 110 piu aliased to uv pip install --system -U 30. 110 pcr aliased to pre-commit run --all-files pypi is a little function in my dotfiles for opening the PyPI page for a package, either pypi \u0026lt;package\u0026gt; or let it try and guess the name from the current directory:\npypi () { if [ \u0026#34;$1\u0026#34; = \u0026#34;\u0026#34; ] then local name=$(python setup.py --name) else local name=$1 fi echo $name open https://pypi.org/project/\u0026#34;$name\u0026#34;/ } The macOS/iTerm/Oh My Zsh command to get this list:\nhistory | awk '{print $2}' | sort | uniq --count | sort --numeric-sort --reverse | head -30\nHeader photo: Close-up the typebars of a Olympia Büromaschinenwerke A.G. Erfurt typewriter (CC BY-NC-SA 2.0 Hugo van Kemenade).\n","date":"4 April 2025","permalink":"https://hugovk.dev/blog/2025/my-most-used-command-line-commands/","section":"Blog","summary":"","title":"My most used command-line commands"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/terminal/","section":"tags","summary":"","title":"terminal"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/ci/","section":"tags","summary":"","title":"CI"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/cpython/","section":"tags","summary":"","title":"cpython"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/free-threaded/","section":"tags","summary":"","title":"free-threaded"},{"content":"GitHub Actions now supports experimental free-threaded CPython!\nThere are three ways to add it to your test matrix:\nactions/setup-python: t suffix actions/setup-uv: t suffix actions/setup-python: freethreaded variable actions/setup-python: t suffix #Using actions/setup-python, you can add the t suffix for Python versions 3.13 and higher: 3.13t and 3.14t.\nThis is my preferred method, we can clearly see which versions are free-threaded and it\u0026rsquo;s straightforward to test both regular and free-threaded builds.\non: [push, pull_request, workflow_dispatch] jobs: build: runs-on: ${{ matrix.os }} strategy: fail-fast: false matrix: python-version: [ \u0026#34;3.13\u0026#34;, \u0026#34;3.13t\u0026#34;, # add this! \u0026#34;3.14\u0026#34;, \u0026#34;3.14t\u0026#34;, # add this! ] os: [\u0026#34;windows-latest\u0026#34;, \u0026#34;macos-latest\u0026#34;, \u0026#34;ubuntu-latest\u0026#34;] steps: - uses: actions/checkout@v4 - name: Set up Python ${{ matrix.python-version }} uses: actions/setup-python@v5 with: python-version: ${{ matrix.python-version }} allow-prereleases: true # needed for 3.14 - run: | python --version --version python -c \u0026#34;import sys; print(\u0026#39;sys._is_gil_enabled:\u0026#39;, sys._is_gil_enabled())\u0026#34; python -c \u0026#34;import sysconfig; print(\u0026#39;Py_GIL_DISABLED:\u0026#39;, sysconfig.get_config_var(\u0026#39;Py_GIL_DISABLED\u0026#39;))\u0026#34; Regular builds will output something like:\nPython 3.14.0a6 (main, Mar 17 2025, 02:44:29) [GCC 13.3.0] sys._is_gil_enabled: True Py_GIL_DISABLED: 0 And free-threaded builds will output something like:\nPython 3.14.0a6 experimental free-threading build (main, Mar 17 2025, 02:44:30) [GCC 13.3.0] sys._is_gil_enabled: False Py_GIL_DISABLED: 1 For example: hugovk/test/actions/runs/14057185035\nactions/setup-uv: t suffix #Similarly, you can install uv with astral/setup-uv and use that to set up free-threaded Python using the t suffix.\non: [push, pull_request, workflow_dispatch] jobs: build: runs-on: ${{ matrix.os }} strategy: fail-fast: false matrix: python-version: [ \u0026#34;3.13\u0026#34;, \u0026#34;3.13t\u0026#34;, # add this! \u0026#34;3.14\u0026#34;, \u0026#34;3.14t\u0026#34;, # add this! ] os: [\u0026#34;windows-latest\u0026#34;, \u0026#34;macos-latest\u0026#34;, \u0026#34;ubuntu-latest\u0026#34;] steps: - uses: actions/checkout@v4 - name: Set up Python ${{ matrix.python-version }} uses: astral-sh/setup-uv@v5 # change this! with: python-version: ${{ matrix.python-version }} enable-cache: false # only needed for this example with no dependencies - run: | python --version --version python -c \u0026#34;import sys; print(\u0026#39;sys._is_gil_enabled:\u0026#39;, sys._is_gil_enabled())\u0026#34; python -c \u0026#34;import sysconfig; print(\u0026#39;Py_GIL_DISABLED:\u0026#39;, sysconfig.get_config_var(\u0026#39;Py_GIL_DISABLED\u0026#39;))\u0026#34; For example: hugovk/test/actions/runs/13967959519\nactions/setup-python: freethreaded variable #Back to actions/setup-python, you can also set the freethreaded variable for 3.13 and higher.\non: [push, pull_request, workflow_dispatch] jobs: build: runs-on: ${{ matrix.os }} strategy: fail-fast: false matrix: python-version: [\u0026#34;3.13\u0026#34;, \u0026#34;3.14\u0026#34;] os: [\u0026#34;windows-latest\u0026#34;, \u0026#34;macos-latest\u0026#34;, \u0026#34;ubuntu-latest\u0026#34;] steps: - uses: actions/checkout@v4 - name: Set up Python ${{ matrix.python-version }} uses: actions/setup-python@v5 with: python-version: ${{ matrix.python-version }} allow-prereleases: true # needed for 3.14 freethreaded: true # add this! - run: | python --version --version python -c \u0026#34;import sys; print(\u0026#39;sys._is_gil_enabled:\u0026#39;, sys._is_gil_enabled())\u0026#34; python -c \u0026#34;import sysconfig; print(\u0026#39;Py_GIL_DISABLED:\u0026#39;, sysconfig.get_config_var(\u0026#39;Py_GIL_DISABLED\u0026#39;))\u0026#34; For example: hugovk/test/actions/runs/39359291708\nPYTHON_GIL=0 #And you may want to set PYTHON_GIL=0 to force Python to keep the GIL disabled, even after importing a module that doesn\u0026rsquo;t support running without it.\nSee Running Python with the GIL Disabled for more info.\nWith the t suffix:\n- name: Set PYTHON_GIL if: endsWith(matrix.python-version, \u0026#39;t\u0026#39;) run: | echo \u0026#34;PYTHON_GIL=0\u0026#34; \u0026gt;\u0026gt; \u0026#34;$GITHUB_ENV\u0026#34; With the freethreaded variable:\n- name: Set PYTHON_GIL if: \u0026#34;${{ matrix.freethreaded }}\u0026#34; run: | echo \u0026#34;PYTHON_GIL=0\u0026#34; \u0026gt;\u0026gt; \u0026#34;$GITHUB_ENV\u0026#34; Please test! #For free-threaded Python to succeed and become the default, it\u0026rsquo;s essential there is ecosystem and community support. Library maintainers: please test it and where needed, adapt your code, and publish free-threaded wheels so others can test their code that depends on yours. Everyone else: please test your code too!\nSee also # Help us test free-threaded Python without the GIL for other ways to test and how to check your build Python free-threading guide actions/setup-python#973 actions/setup-python@v5.5.0 Header photo: \u0026ldquo;Spinning Room, Winding Bobbins with Woolen Yarn for Weaving, Philadelphia, PA\u0026rdquo; by Library Company of Philadelphia, with no known copyright restrictions.\n","date":"25 March 2025","permalink":"https://hugovk.dev/blog/2025/free-threaded-python-on-github-actions/","section":"Blog","summary":"","title":"Free-threaded Python on GitHub Actions"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/github-actions/","section":"tags","summary":"","title":"github-actions"},{"content":"What? #PEP 639 defines a spec on how to document licences used in Python projects.\nInstead of using a Trove classifier such as \u0026ldquo;License :: OSI Approved :: BSD License\u0026rdquo;, which is imprecise (for example, which BSD licence?), the SPDX licence expression syntax is used.\nHow? #pyproject.toml #Change pyproject.toml as follows.\nI usually use Hatchling as a build backend, and support was added in 1.27:\n[build-system] build-backend = \u0026#34;hatchling.build\u0026#34; requires = [ \u0026#34;hatch-vcs\u0026#34;, - \u0026#34;hatchling\u0026#34;, + \u0026#34;hatchling\u0026gt;=1.27\u0026#34;, ] Replace the freeform license field with a valid SPDX license expression, and add license-files which points to the licence files in the repo. There\u0026rsquo;s often only one, but if you have more than one, list them all:\n[project] ... -license = { text = \u0026#34;MIT\u0026#34; } +license = \u0026#34;MIT\u0026#34; +license-files = [ \u0026#34;LICENSE\u0026#34; ] Optionally delete the deprecated licence classifier:\nclassifiers = [ \u0026#34;Development Status :: 5 - Production/Stable\u0026#34;, \u0026#34;Intended Audience :: Developers\u0026#34;, - \u0026#34;License :: OSI Approved :: MIT License\u0026#34;, \u0026#34;Operating System :: OS Independent\u0026#34;, For example, see humanize#236 and prettytable#350.\nUpload #Then make sure to use a PyPI uploader that supports this.\nI recommend using Trusted Publishing which I use with pypa/gh-action-pypi-publish to deploy from GitHub Actions. I didn\u0026rsquo;t need to make any changes here, just make a release as usual.\nResult #PyPI #PyPI shows the new metadata:\npip #pip can also show you the metadata:\n$ pip install prettytable==3.13.0 $ pip show prettytable Name: prettytable Version: 3.13.0 ... License-Expression: BSD-3-Clause Location: /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages Requires: wcwidth Required-by: norwegianblue, pypistats Thank you! #A lot of work went into this. Thank you to PEP authors Philippe Ombredanne for creating the first draft in 2019, to C.A.M. Gerlach for the second draft in 2021, and especially to Karolina Surma for getting the third draft over the finish line and helping with the implementation.\nAnd many projects were updated to support this, thanks to the maintainers and contributors of at least:\nPyPI/Warehouse packaging 24.2 Hatchling 1.27 Twine 6.1.0 PyPI publish GitHub Action v1.12.4 build-and-inspect-python-package v2.12.0 pip 25.0 Header photo: Amelia Earhart\u0026rsquo;s 1932 pilot licence in the San Diego Air and Space Museum Archive, with no known copyright restrictions.\n","date":"14 February 2025","permalink":"https://hugovk.dev/blog/2025/improving-licence-metadata/","section":"Blog","summary":"","title":"Improving licence metadata"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/pypi/","section":"tags","summary":"","title":"pypi"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/sovereign-tech-fellowship/","section":"tags","summary":"","title":"Sovereign-Tech-Fellowship"},{"content":"Prologue #This was a Twitter thread from 15th January 2022 about my first CPython bug. Eight days from report to fix to merge, not bad!\nDelay #I helped delay the release of Python 3.11.0a4! But in a good way! 😇\nPython 3.11 is due out in October, but they make early alpha, beta and release candidates available for people to help test Python itself and their own code before the big release.\nSo I tested Pillow\u0026hellip;\nTests #The Pillow test suite passed with 3.11 ✅\nNext I tried building the documentation with 3.11 ❌\nThe docs program, Sphinx, emitted a couple of warnings. Warnings are often missed because they don\u0026rsquo;t error. But luckily we use the \u0026ldquo;-W\u0026rdquo; option to turn warnings into hard errors.\nSphinx #Maybe Sphinx isn\u0026rsquo;t ready for Python 3.11?\nRather than submitting a report with the full Pillow documentation (lots of files) I made a new, \u0026ldquo;minimal\u0026rdquo; example with just enough stuff to reproduce it.\nThis makes it easier to investigate what\u0026rsquo;s up.\nReport 1 #I reported this to Sphinx. The problem was that a page in a subdirectory could load an image from one directory, but not from another, further away directory.\nIt occurs for the Python 3.11.0a3 alpha, but not 3.7-3.10.\nCPython #A few hours later the Sphinx maintainer Takeshi said it looks like a change to a part of Python itself \u0026ndash; os.path.normpath() \u0026ndash; since 3.11.0a3, and as it wasn\u0026rsquo;t mentioned on the \u0026ldquo;What\u0026rsquo;s New in Python 3.11\u0026rdquo; page it could be a bug in Python.\nHe asked me to report it to Python.\nReport 2 #I reported it to Python with Takeshi\u0026rsquo;s even more minimal example.\nHalf an hour later Christian pointed out a change which may have caused this.\nI tested and confirmed.\nThe next day Steve confirmed it was a bug and set it as a \u0026ldquo;release blocker\u0026rdquo;.\nFix #Steve also said it will needs tests, because this bug slipped out due to a gap in testing.\nI didn\u0026rsquo;t know how to fix the bug, but I could write some test cases!\nneonene then took the tests and fixed the bug! In doing so they found even more bugs!\nMerge #These extra bugs also existed in earlier versions.\nBut it turns out path handling can get pretty complicated in places, so Steve decided to only fix my bug now to get it released and the others can be sorted later.\nThe fix was merged and I confirmed it also worked with Sphinx ✅\nConclusion #And that\u0026rsquo;s about it!\nIt\u0026rsquo;s now fixed in 3.11.0a4; much better to find these before 3.11.0 final is released to the world in October. Along the way we found more issues to address.\nShort version: test your code with 3.11 now, you may find issues in your code or in Python itself 🚀\nEpilogue #Back to 2025: Please test and delay Python 3.14 alpha \u0026ndash; but in a good way! 😇\n","date":"4 February 2025","permalink":"https://hugovk.dev/blog/2025/how-to-delay-a-python-release/","section":"Blog","summary":"","title":"How to delay a Python release"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/twitter/","section":"tags","summary":"","title":"twitter"},{"content":"You can get download numbers for PyPI packages (or projects) from a Google BigQuery dataset. You need a Google account and credentials, and Google gives 1 TiB of free quota per month.\nEach month, I have automation to fetch the download numbers for the 8,000 most popular packages over the past 30 days, and make it available as more accessible JSON and CSV files at Top PyPI Packages. This data is widely used for research in academia and industry.\nHowever, as more packages and releases are uploaded to PyPI, and there are more and more downloads logged, the amount of billed data increases too.\nThis chart shows the amount of data billed per month.\nAt first, I was only collecting downloads data for 4,000 packages, and it was fetched for two queries: downloads over 365 days and over 30 days. But as time passed, it started using up too much quota to download data for 365 days.\nSo I ditched the 365-day data, and increased the 30-day data from 4,000 to 5,000 packages. Later, I checked how much quota was being used and increased from 5,000 packages to 8,000 packages.\nBut then I exceeded the BigQuery monthly quota of 1 TiB fetching data for July 2024.\nTo fetch the missing data and investigate what\u0026rsquo;s going in, I started Google Cloud\u0026rsquo;s 90-day, $300 (€277.46) free-trial 💸\nHere\u0026rsquo;s what I found!\nFinding: it costs more to get data for downloads from only pip than from all installers #I use the pypinfo client to help query BigQuery. By default, it only fetches downloads for pip.\nOnly pip #This command gets one day\u0026rsquo;s download data for the top 10 packages, for pip only:\n$ pypinfo --limit 10 --days 1 \u0026#34;\u0026#34; project Served from cache: False Data processed: 58.21 GiB Data billed: 58.21 GiB Estimated cost: $0.29 Results:\nproject download count boto3 37,251,744 aiobotocore 16,252,824 urllib3 16,243,278 botocore 15,687,125 requests 13,271,314 s3fs 12,865,055 s3transfer 12,014,278 fsspec 11,982,305 charset-normalizer 11,684,740 certifi 11,639,584 Total 158,892,247 All installers #Adding the --all flag gets one day\u0026rsquo;s download data for the top 10 packages, for all installers:\n$ pypinfo --all --limit 10 --days 1 \u0026#34;\u0026#34; project Served from cache: False Data processed: 46.63 GiB Data billed: 46.63 GiB Estimated cost: $0.23 project download count boto3 39,495,624 botocore 17,281,187 urllib3 17,225,121 aiobotocore 16,430,826 requests 14,287,965 s3fs 12,958,516 charset-normalizer 12,781,405 certifi 12,647,098 setuptools 12,608,120 idna 12,510,335 Total 168,226,197 So we can see the default pip-only costs an extra 25% data processed and data billed, and costs an extra 25% in dollars.\nUnsurprisingly, the actual download counts are higher for all installers. The ranking has changed a bit, but I expect we\u0026rsquo;re still getting more-or-less the same packages in the top thousands of results.\nQueries #It sends a query like this to BigQuery for only pip:\nSELECT file.project as project, COUNT(*) as download_count, FROM `bigquery-public-data.pypi.file_downloads` WHERE timestamp BETWEEN TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL -2 DAY) AND TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL -1 DAY) AND details.installer.name = \u0026#34;pip\u0026#34; GROUP BY project ORDER BY download_count DESC LIMIT 10 And for all installers:\nSELECT file.project as project, COUNT(*) as download_count, FROM `bigquery-public-data.pypi.file_downloads` WHERE timestamp BETWEEN TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL -2 DAY) AND TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL -1 DAY) GROUP BY project ORDER BY download_count DESC LIMIT 10 These queries are the same, except the default has an extra AND details.installer.name = \u0026quot;pip\u0026quot; condition. It seems reasonable it would cost more to do extra filtering work.\nInstallers #Let\u0026rsquo;s look at the installers:\n$ pypinfo --all --limit 100 --days 1 \u0026#34;\u0026#34; installer Served from cache: False Data processed: 29.49 GiB Data billed: 29.49 GiB Estimated cost: $0.15 installer name download count pip 1,121,198,711 uv 117,194,833 requests 29,828,272 poetry 23,009,454 None 8,916,745 bandersnatch 6,171,555 setuptools 1,362,797 Bazel 1,280,271 Browser 1,096,328 Nexus 593,230 Homebrew 510,247 Artifactory 69,063 pdm 62,904 OS 13,108 devpi 9,530 conda 2,272 pex 194 Total 1,311,319,514 pip still by far the most popular, and unsurprising uv is up there too, with about 10% of pip\u0026rsquo;s downloads.\nThe others are about 25% or less of uv. A lot of them are mirroring services that we wanted to exclude before.\nI think given uv\u0026rsquo;s importance, and my expectation that it will continue to take a bigger share of the pie, plus especially the extra cost for filtering by just pip, means that we should switch to fetching data for all downloaders. Plus the others don\u0026rsquo;t account for that much of the pie.\nFinding: the number of packages doesn\u0026rsquo;t affect the cost #This was the biggest surprise. Earlier I\u0026rsquo;d been increasing or decreasing the number to try and remain under quota. But it turns out it makes no difference how many packages you query!\nI fetched data for just one day and all installers for different package limits: 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000. Sample query:\nSELECT file.project as project, COUNT(*) as download_count, FROM `bigquery-public-data.pypi.file_downloads` WHERE timestamp BETWEEN TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL -2 DAY) AND TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL -1 DAY) GROUP BY project ORDER BY download_count DESC LIMIT 8000 Result: Interestingly, the cost is the same for all limits (1000-8000): $0.31.\nRepeating with one day but filtering for pip only:\nResult: Cost increased to $0.39 but again the same for all limits.\nLet\u0026rsquo;s repeat with all installers, but for 30 days, and this time query in decreasing limits, in case we were only paying for incremental changes: 8000, 7000, 6000, 5000, 4000, 3000, 2000, 1000:\nResult: Again, the cost is the same regardless of package limit: $4.89 per query.\nWell then, let\u0026rsquo;s repeat with the limit increasing by powers of ten, up to 1,000,000! This last one fetches data for all 531,022 packages on PyPI:\nlimit projects count estimated cost bytes billed bytes processed 1 1 0.20 43,447,746,560 43,447,720,943 10 10 0.20 43,447,746,560 43,447,720,943 100 100 0.20 43,447,746,560 43,447,720,943 1000 1,000 0.20 43,447,746,560 43,447,720,943 8000 8,000 0.20 43,447,746,560 43,447,720,943 10000 10,000 0.20 43,447,746,560 43,447,720,943 100000 100,000 0.20 43,447,746,560 43,447,720,943 1000000 531,022 0.20 43,447,746,560 43,447,720,943 Result: Again, same cost, whether for 1 package or 531,022 packages!\nFinding: the number of days affects the cost #No surprise. I\u0026rsquo;d earlier noticed 365 days too took much quota, and I could continue with 30 days.\nHere\u0026rsquo;s the estimated cost and bytes billed (for one package, all installers) between one and 30 days (f\u0026quot;pypinfo --all --json --indent 0 --days {days} --limit 1 '' project\u0026quot;), showing a roughly linear increase:\nConclusion # It doesn\u0026rsquo;t matter how many packages I fetch data for, I might as well fetch all and make it available to everyone, depending on the size of the data file. It will make sense to still offer a smaller file with 8,000 or so packages: often you just need a large-ish yet manageable number.\nIt costs more to filter for only downloads from pip, so I\u0026rsquo;ve switched to fetching data for all installers.\nThe number of days affects the cost, so I will need to decrease this in the future to stay within quota. For example, at some point I may need to switch from 30 to 25 days, and later from 25 to 20 days.\nMore details from the investigation, the scripts and data files can be found at hugovk/top-pypi-packages#36.\nAnd let me know if you know any tricks to reduce costs!\nHeader photo: \u0026ldquo;The Balancing Rock, Stonehenge, Near Glen Innes, NSW\u0026rdquo; by the Royal Australian Historical Society, with no known copyright restrictions.\n","date":"24 November 2024","permalink":"https://hugovk.dev/blog/2024/a-surprising-thing-about-pypis-bigquery-data/","section":"Blog","summary":"","title":"A surprising thing about PyPI's BigQuery data"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/big-query/","section":"tags","summary":"","title":"big-query"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/google/","section":"tags","summary":"","title":"google"},{"content":"We can use uv to make linting and testing on GitHub Actions around 1.5 times as fast.\nLinting #When using pre-commit for linting:\nname: Lint on: [push, pull_request, workflow_dispatch] env: FORCE_COLOR: 1 permissions: contents: read jobs: lint: runs-on: ubuntu-latest steps: - uses: actions/checkout@v4 with: persist-credentials: false - uses: actions/setup-python@v5 with: python-version: \u0026#34;3.x\u0026#34; cache: pip - uses: pre-commit/action@v3.0.1 We can replace pre-commit/action with tox-dev/action-pre-commit-uv:\n- uses: actions/setup-python@v5 with: python-version: \u0026#34;3.x\u0026#34; - cache: pip - - uses: pre-commit/action@v3.0.1 + - uses: tox-dev/action-pre-commit-uv@v1 name: Lint on: [push, pull_request, workflow_dispatch] env: FORCE_COLOR: 1 permissions: contents: read jobs: lint: runs-on: ubuntu-latest steps: - uses: actions/checkout@v4 with: persist-credentials: false - uses: actions/setup-python@v5 with: python-version: \u0026#34;3.x\u0026#34; - uses: tox-dev/action-pre-commit-uv@v1 This means uv will create virtual environments and install packages for pre-commit, which is faster for the initial seed operation when there\u0026rsquo;s no cache.\nLint comparison #For example: python/blurb#32\nBefore After Times faster No cache 60s 37s 1.62 With cache 11s 11s 1.00 Testing #When testing with tox:\nname: Test on: [push, pull_request, workflow_dispatch] permissions: contents: read env: FORCE_COLOR: 1 jobs: test: runs-on: ubuntu-latest strategy: fail-fast: false matrix: python-version: [\u0026#34;3.9\u0026#34;, \u0026#34;3.10\u0026#34;, \u0026#34;3.11\u0026#34;, \u0026#34;3.12\u0026#34;, \u0026#34;3.13\u0026#34;, \u0026#34;3.14\u0026#34;] steps: - uses: actions/checkout@v4 with: persist-credentials: false - name: Set up Python ${{ matrix.python-version }} uses: actions/setup-python@v5 with: python-version: ${{ matrix.python-version }} allow-prereleases: true cache: pip - name: Install dependencies run: | python --version python -m pip install -U pip python -m pip install -U tox - name: Tox tests run: | tox -e py We can replace tox with tox-uv:\n- name: Set up Python ${{ matrix.python-version }} uses: actions/setup-python@v5 with: python-version: ${{ matrix.python-version }} allow-prereleases: true - cache: pip - - name: Install dependencies - run: | - python --version - python -m pip install -U pip - python -m pip install -U tox + - name: Install uv + uses: hynek/setup-cached-uv@v2 - name: Tox tests run: | - tox -e py + uvx --with tox-uv tox -e py name: Test on: [push, pull_request, workflow_dispatch] permissions: contents: read env: FORCE_COLOR: 1 jobs: test: runs-on: ubuntu-latest strategy: fail-fast: false matrix: python-version: [\u0026#34;3.9\u0026#34;, \u0026#34;3.10\u0026#34;, \u0026#34;3.11\u0026#34;, \u0026#34;3.12\u0026#34;, \u0026#34;3.13\u0026#34;] steps: - uses: actions/checkout@v4 with: persist-credentials: false - name: Set up Python ${{ matrix.python-version }} uses: actions/setup-python@v5 with: python-version: ${{ matrix.python-version }} allow-prereleases: true - name: Install uv uses: hynek/setup-cached-uv@v2 - name: Tox tests run: | uvx --with tox-uv tox -e py tox-uv is tox plugin to replace virtualenv and pip with uv in your tox environments. We only need to install uv, and use uvx to both install tox-uv and run tox, for faster installs of tox, the virtual environment, and the dependencies within it.\nTest comparison #For example: python/blurb#32\nBefore After Times faster No cache 2m 0s 1m 26s 1.40 With cache 1m 58s 1m 22s 1.44 No pip with tox-uv #One difference with uv environments compared to regular venv/virtualenv ones is that they do not have pip. This means calls to pip need replacing, for example in tox.ini:\n[testenv] -commands_pre = - {envpython} -m pip install -U -r requirements.txt +deps = + -r requirements.txt pass_env = FORCE_COLOR commands = {envpython} -m pytest {posargs} If you still need pip (or setuptools or wheel), add uv_seed = True to your [testenv] to inject them.\nBonus tip #Run the new tool zizmor to find security issues in GitHub Actions.\nHeader photo: \u0026ldquo;Road cycling at the 1952 Helsinki Olympics\u0026rdquo; by Olympia-Kuva Oy \u0026amp; Helsinki City Museum, Public Domain.\n","date":"2 November 2024","permalink":"https://hugovk.dev/blog/2024/speed-up-ci-with-uv/","section":"Blog","summary":"","title":"Speed up CI with uv ⚡"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/uv/","section":"tags","summary":"","title":"uv"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/2024/","section":"tags","summary":"","title":"2024"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/core-dev-sprint/","section":"tags","summary":"","title":"core-dev-sprint"},{"content":"🐍🏃The week before last was the annual Python Core Dev Sprint, graciously hosted by Meta in Bellevue, WA!\nThe idea: bring a bunch of Python core team members, triagers, and special guests to the same room for a week. It\u0026rsquo;s hugely beneficial and productive, we held many in-depth discussions that just don\u0026rsquo;t happen when we\u0026rsquo;re all remote and async, and got to work on many different things together.\nThe sprint room During the week, I reviewed 39 PRs, created 15, merged 10, updated 4, and closed 2 issues.\nMonday highlights #As release manager for Python 3.14, I discussed with Brett Cannon one of his project ideas which will come after lock files, and after the next big one.\nAlso as RM, discussed with Russell Keith-Magee, Ned Deily, Łukasz Langa and Thomas Wouters about including official binaries for iOS and Android, which wandered into ideas about security releases.\nI did some maintenance of our PyPI projects, adding PEP 740 attestations, support for the new Python 3.13 and dropping support for the very-nearly-EOL 3.8.\nTuesday highlights #Started investigating slow doctest on 3.13+ with Alex Waygood, who on Wednesday narrowed it down to a problem with the new incremental garbage collector, which would go on to be reverted by Friday and result in Python 3.13\u0026rsquo;s Monday release to be postponed and replaced with an extra release candidate. Not ideal, but much better to discover these things before the big release.\nWe had a Q\u0026amp;A session with the Steering Council: Barry Warsaw, Emily Morehouse, Gregory P. Smith, Pablo Galindo Salgado and Thomas.\nThe Python Steering Council Proofread Guido van Rossum\u0026rsquo;s STAR voting proposal for electing future steering councils.\nDiscussed with Eric Snow his novel method for displaying many code samples in a table, using \u0026lt;details\u0026gt; disclosures to prevent the table being too wide. Looks like a good solution!\nWednesday highlights #I applied the finishing touches to PEP 2026 (Calendar versioning for Python) and Barry gave it a final review. Ready for submission!\nSeth Larson, the PSF Security Developer-in-Residence, wasn\u0026rsquo;t at the sprint but we discussed our plan to stop providing GPG signatures for CPython and rely on SigStore instead. Expect a PEP soon!\nAlso not at the sprint, I recommended PSF Infrastructure Engineer Jacob Coffee as a CPython triager. Welcome aboard!\nThe whole room discussed including static type annotations in CPython.\nWe had a Q\u0026amp;A session with two of the three Developers-in-Residence, Łukasz and Petr Viktorin.\nQ\u0026A with Łukasz and Petr Discussed expanding the voter pool for Steering Council elections with Mariatta, Greg and Thomas.\nLarry Hastings handed out, in return for oohs and aahs, some nice P.C.D.S. 2024 stickers he generously designed and printed up for us. Thanks!\nPCDS 2024 stickers by Larry Thursday highlights #On the 26th September, at 10:26 Bellevue time (20:26 Helsinki time), I submitted PEP 2026 to the Steering Council!🤞\nBrett discussed whether we should update PEP 387 to prefer 5 year deprecations instead of 2 years.\nBrandt Bucher gave us all an update on the progress of the Just-in-Time (JIT) compiler (\u0026ldquo;we went from 0% slower to 0% faster!\u0026rdquo;) and we discussed plans for Python 3.14.\nBecause I couldn\u0026rsquo;t attend Thursday\u0026rsquo;s Helsinki Python meetup due to being at another kind of Python meetup on the other side of the world, I gave the famous HelPy quiz to the assembled core devs. Unsurprisingly they did pretty well, but the most incorrect answer was a pleasant surprise: we\u0026rsquo;ve had ~400 not ~80 new contributors to Python 3.13!\nPablo performed card tricks!\nMagic from Pablo Meta took us out for a delicious dinner at a local fish restaurant. Thank you!\nFriday highlights #Mariatta presented ideas to Jelle Zijlstra, Petr, Russell and me about to use modern tools to create a modern, interactive tutorial.\nAlso during the week, continued work with Adam Turner on improving the docs.python.org build. Adam wasn\u0026rsquo;t at the sprint, so tag-teamed PR reviews overnight. After much work straddling many teams, projects and repos, we\u0026rsquo;ve got the full HTML build loop for 13 languages × 3 versions down from over 40 hours to just under 9 hours, with more improvements coming.\nMade a demo of the CPython docs using the PyData Sphinx Theme.\nAlong with around 25 others, I was on Łukasz and Pablo\u0026rsquo;s core.py podcast.\nŁukasz and Pablo in their ad-hoc podcast studio in a Meta meeting room Itamar gave us cake for the podcast\u0026rsquo;s first birthday!\ncake.py. Photo by Itamar Oren. Thank you #It was a hugely productive week, big thanks to Itamar Oren and Meta for organising and hosting!\nSee also Mariatta\u0026rsquo;s excellent blog posts, and I recommend the core.py podcast with short interviews with some 25 attendees! Łukasz and Pablo were also guests on the Changelog podcast during the sprint.\nHeader photo by Itamar Oren\n","date":"5 October 2024","permalink":"https://hugovk.dev/blog/2024/python-core-developer-sprint-2024/","section":"Blog","summary":"","title":"Python Core Developer Sprint 2024"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/sprint/","section":"tags","summary":"","title":"sprint"},{"content":"If you read just one, check Kati\u0026rsquo;s thorough recap!\n22nd May 2024\nEchos of the People API user guide by Ned Batchelder 24th May 2024\nWagtailers spread their wings at PyCon 2024 by Meagen Voss (@vossisboss)\nFlet at PyCon US 2024 by Feodor Fitsner\n27th May 2024\nPyCon US 2024: My First PyCon in US 🫶🏻 by Tomy Hsieh 28th May 2024\nPyCon 2024 Reflection by Trey Hunner\nWeeknotes: PyCon US 2024 by Simon Willison\n3 key takeaways from PyCon US 2024 by Luis Juncal \u0026amp; Yolanda Robla\n30th May 2024\npyOpenSci at PyCon US 2024 - Python packaging and community by Leah Wasser\nOur Experience at PyCon US 2024 in Pittsburgh by Ngazetungue Muheue (@ngazetungue)\n1st June 2024\nPyCon US 2024 Recap by Kati Michel (@katherinemichel) 4th June 2024\nPyCon US 2024 by Yilei Yang 13th June 2024\nPyCon US 2024 as Security Developer-in-Residence by Seth Michael Larson (@sethmlarson) 14th June 2024\nThe Python Language Summit 2024 by Seth Michael Larson (@sethmlarson) 16th June 2024\nPyCon US 2024 Highlights by David Foster 19th June 2024\nFrom Pittsburgh to New York: A PyCon US 2024 Adventure by Monica Oyugi (@monicaoyugi) Header photo: Downtown Pittsburgh seen between the Andy Warhol Bridge and Roberto Clemente Bridge\n","date":"13 June 2024","permalink":"https://hugovk.dev/blog/2024/pycon-us-2024-a-roundup-of-writeups/","section":"Blog","summary":"","title":"PyCon US 2024: A roundup of writeups"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/pycon-us/","section":"tags","summary":"","title":"pycon-us"},{"content":"Calling all Python library maintainers! 🐍\nThe Python 3.13 beta is out! 🎉\nPEP 719 defines the release schedule for Python 3.13.0:\nThe first beta candidate came out on 8th May 2024 The first release candidate is set for 30th July 2024 And the full release is set for 1st October 2024 In his announcement, Thomas Wouters, release manager for Python 3.12 and 3.13, said:\nWe strongly encourage maintainers of third-party Python projects to test with 3.13 during the beta phase and report issues found to the Python bug tracker as soon as possible. While the release is planned to be feature complete entering the beta phase, it is possible that features may be modified or, in rare cases, deleted up until the start of the release candidate phase (Tuesday 2024-07-30). Our goal is to have no ABI changes after beta 4 and as few code changes as possible after 3.13.0rc1, the first release candidate. To achieve that, it will be extremely important to get as much exposure for 3.13 as possible during the beta phase.\nTest with 3.13 #It\u0026rsquo;s now time for us library maintainers to start testing our projects with 3.13. There\u0026rsquo;s two big benefits:\nThere have been removals and changes in Python 3.13. Testing now helps us make our code compatible and avoid any big surprises (for us and our users) at the big launch in October.\nWe might find bugs in Python itself! Reporting those will help get them fixed and help everyone.\nHow #GitHub Actions: setup-python #To test the latest alpha, beta or release candidate with actions/setup-python, add 3.13 and allow-prereleases: true to your workflow matrix.\nFor example:\njobs: test: runs-on: ubuntu-latest strategy: fail-fast: false matrix: python-version: [\u0026#34;3.10\u0026#34;, \u0026#34;3.11\u0026#34;, \u0026#34;3.12\u0026#34;, \u0026#34;3.13\u0026#34;] steps: - uses: actions/checkout@v4 - name: Set up Python ${{ matrix.python-version }} uses: actions/setup-python@v5 with: python-version: ${{ matrix.python-version }} allow-prereleases: true (We can instead use 3.13-dev and omit allow-prereleases: true, but I find the above a bit neater, and when 3.13.0 final is released in October, it will continue testing with full release versions.)\nGitHub Actions: deadsnakes #For the bleeding edge, we can use deadsnakes/action to test the latest nightly build:\njobs: test: runs-on: ubuntu-latest strategy: fail-fast: false matrix: python-version: [\u0026#34;3.10\u0026#34;, \u0026#34;3.11\u0026#34;, \u0026#34;3.12\u0026#34;, \u0026#34;3.13-dev\u0026#34;] steps: - uses: actions/checkout@v4 - name: Set up Python ${{ matrix.python-version }} if: \u0026#34;!endsWith(matrix.python-version, \u0026#39;-dev\u0026#39;)\u0026#34; uses: actions/setup-python@v5 with: python-version: ${{ matrix.python-version }} - uses: deadsnakes/action@v3.1.0 name: Set up Python ${{ matrix.python-version }} (deadsnakes) if: endsWith(matrix.python-version, \u0026#39;-dev\u0026#39;) with: python-version: ${{ matrix.python-version }} When to support 3.13? #When should you declare support and add the Programming Language :: Python :: 3.13 Trove classifier? Some projects already have!\nIf you have a pure Python project, you can release now.\nIf you have C extensions and other projects depend on yours, a preview release with wheels will help them test and prepare. I\u0026rsquo;ve already started releasing these.\nABI breaks? #ABI breaks during the beta are infrequent and unintentional. If they happen, you can rebuild your wheels and upload them to an existing PyPI release by adding an optional build tag to the filename:\nThe wheel filename is {distribution}-{version}(-{build tag})?-{python tag}-{abi tag}-{platform tag}.whl.\nbuild tag: [\u0026hellip;] Acts as a tie-breaker if two wheel file names are the same in all other respects (i.e. name, version, and other tags).\nFor example, this updates the filename and metadata with build number 1, and removes the original file:\npython -m pip install \u0026#34;wheel\u0026gt;=0.4.0\u0026#34; wheel tags --build=1 --remove sampleproject-5.0.0-cp313-cp313-macosx_10_10_x86_64.whl # this creates a file named sampleproject-5.0.0-1-cp313-cp313-macosx_10_10_x86_64.whl Upload it, and the new file will be used instead of the old one. See also Brett Cannon\u0026rsquo;s advice on making new wheels.\nIn any case, let\u0026rsquo;s start testing 3.13 now! 🚀\nSee also # Help us test free-threaded Python without the GIL What’s New In Python 3.13 Header photo: Lot 044 from the PyCon 2024 PyLadies Auction: \u0026ldquo;A pair of hand-woven snakes (PyCon Latam 2023 edition), donated by the PyCon Latam Organizers. This is a souvenir from PyCon Latam held in Mexica 2023 that represents the snakes of the PyLatam community logo. They are made completely by hand.\u0026quot;\n","date":"4 June 2024","permalink":"https://hugovk.dev/blog/2024/help-test-python-313/","section":"Blog","summary":"","title":"Help test Python 3.13!"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/css/","section":"tags","summary":"","title":"css"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/print/","section":"tags","summary":"","title":"print"},{"content":"Want to print out the PyCon US schedule? Paper doesn\u0026rsquo;t run out of batteries, is easy to scribble on, and stuff into a pocket (technical term: the affordances of paper).\nHere\u0026rsquo;s some custom CSS and JavaScript to make it nicely printable.\nInstall the Styler browser extension\nView a PyCon schedule page such as https://us.pycon.org/2024/schedule/talks/ and click the Styler extension\u0026rsquo;s S icon\nPaste this CSS into the upper box:\nbody.pycon-schedule div.internal-page-header, body.pycon-schedule div.panel-heading, body.pycon-schedule footer, body.pycon-schedule div.badges { display: none; } body.pycon-schedule .container { margin: 0; max-width: fit-content; } body.pycon-schedule main.content { margin: 0; width: 100% !important; } body.pycon-schedule .calendar { left: auto !important; width: 100% !important; } body.pycon-schedule .slot { padding: 5px; } @media print { a:after { content:\u0026#39;\u0026#39;; } a[href]:after { content: none !important; } } Paste this JavaScript into the lower box: $(document).ready(function () { if ( window.location.pathname.match(\u0026#34;2024/schedule/\u0026#34;) \u0026amp;\u0026amp; !window.location.pathname.match(\u0026#34;2024/schedule/presentation/\u0026#34;) ) { $(\u0026#34;body\u0026#34;).addClass(\u0026#34;pycon-schedule\u0026#34;); } }); Print! It\u0026rsquo;ll run on any of the https://us.pycon.org/2024/schedule/* pages, but not the individual presentation pages such as https://us.pycon.org/2024/schedule/presentation/61/\nIt\u0026rsquo;s not perfect, the right edge is slightly cut off, but it\u0026rsquo;s more printable than the original.\nOnce printed, you can click the Styler icon and the x button to disable Styler for the site so you can browse the original version.\nSee also:\nPrintable PyCon 2023 schedule ","date":"11 May 2024","permalink":"https://hugovk.dev/blog/2024/printable-pycon-2024-schedule/","section":"Blog","summary":"","title":"Printable PyCon 2024 schedule"},{"content":"Python 3.13 is due out in October 2024 and work is underway to implement experimental support for PEP 703 - Making the Global Interpreter Lock Optional in CPython.\nSee also Free-threaded CPython in \u0026ldquo;What\u0026rsquo;s New in Python 3.13?\u0026rdquo;\nAs the Steering Council noted in their acceptance of the PEP, to succeed it\u0026rsquo;s important to have community support.\nProjects will need to test their code with free-threaded (aka \u0026ldquo;nogil\u0026rdquo; but don\u0026rsquo;t call it that!) Python builds to help us find bugs in CPython, and to check their code is compatible.\nHere\u0026rsquo;s some ways to test.\nOfficial installers Build it yourself deadsnakes GitHub Actions? Fedora Official installers #The official macOS (starting in beta 2) and Windows installers has an option to install the free-threading binaries, which also installs python3.13t alongside the regular python3.13:\npython/cpython#120098 https://docs.python.org/3.13/using/windows.html#installing-free-threaded-binaries Build it yourself #Check out the CPython Git repo and build yourself using the --disable-gil configuration flag.\nFor example, on macOS I run:\n$ GDBM_CFLAGS=\u0026#34;-I$(brew --prefix gdbm)/include\u0026#34; \\ GDBM_LIBS=\u0026#34;-L$(brew --prefix gdbm)/lib -lgdbm\u0026#34; \\ ./configure --config-cache \\ --with-system-libmpdec \\ --with-openssl=\u0026#34;$(brew --prefix openssl@3.0)\u0026#34; \\ --disable-gil \u0026amp;\u0026amp; make -s -j10 $ ./python.exe -c \u0026#34;import sysconfig; print(sysconfig.get_config_var(\u0026#39;Py_GIL_DISABLED\u0026#39;))\u0026#34; 1 $ ./python.exe -c \u0026#34;import sys; print(sys._is_gil_enabled())\u0026#34; False More details in the devguide:\nhttps://devguide.python.org/getting-started/setup-building/ GitHub Actions: deadsnakes/action #We can use the deadsnakes/action to test Ubuntu.\nFor example:\non: [push, pull_request, workflow_dispatch] jobs: build: runs-on: ubuntu-latest strategy: matrix: python-version: [3.12, 3.13-dev] name: main steps: - uses: actions/checkout@v4 - uses: actions/setup-python@v5 if: \u0026#34;!endsWith(matrix.python-version, \u0026#39;-dev\u0026#39;)\u0026#34; with: python-version: ${{ matrix.python-version }} - uses: deadsnakes/action@v3.1.0 if: endsWith(matrix.python-version, \u0026#39;-dev\u0026#39;) with: python-version: ${{ matrix.python-version }} nogil: true - run: | python --version --version which python python -c \u0026#34;import sysconfig; print(sysconfig.get_config_var(\u0026#39;Py_GIL_DISABLED\u0026#39;))\u0026#34; python -c \u0026#34;import sys; print(sys._is_gil_enabled())\u0026#34; GitHub Actions: actions/setup-python #I\u0026rsquo;ve asked for support at actions/setup-python#771, they\u0026rsquo;re looking into it 🤞\nIn the meantime, give it an upvote, and use deadsnakes/action ⤴️\ndeadsnakes: PPA #The deadsnakes project provides Personal Package Archives of Python packaged for Ubuntu, included free-threaded builds.\nFor example, python3.13-nogil under python3.13 - 3.13.0~a2-1+focal1 and python3.13 - 3.13.0~a2-1+jammy1 at https://launchpad.net/~deadsnakes/+archive/ubuntu/ppa/+packages\nFedora #Fedora uses the python3.13t executable name as decided by the Steering Council:\n$ # Install $ sudo dnf install python3.13-freethreading $ # Run $ /usr/bin/python3.13t -c \u0026#34;import sysconfig; print(sysconfig.get_config_var(\u0026#39;Py_GIL_DISABLED\u0026#39;))\u0026#34; 1 $ /usr/bin/python3.13t -c \u0026#34;import sys; print(sys._is_gil_enabled())\u0026#34; False How to check your build #To confirm if you\u0026rsquo;re using a free-threaded build, check the double --version option (starting in beta 2):\n$ # Regular build $ python3.13 --version --version Python 3.13.0b2 (v3.13.0b2:3a83b172af, Jun 5 2024, 12:50:24) [Clang 15.0.0 (clang-1500.3.9.4)] $ # Free-threaded build $ python3.13t --version --version Python 3.13.0b2 experimental free-threading build (v3.13.0b2:3a83b172af, Jun 5 2024, 12:57:31) [Clang 15.0.0 (clang-1500.3.9.4)] Or the Py_GIL_DISABLED macro:\n$ # Regular build $ python3.13 -c \u0026#34;import sysconfig; print(sysconfig.get_config_var(\u0026#39;Py_GIL_DISABLED\u0026#39;))\u0026#34; 0 $ # Free-threaded build $ python3.13t -c \u0026#34;import sysconfig; print(sysconfig.get_config_var(\u0026#39;Py_GIL_DISABLED\u0026#39;))\u0026#34; 1 By default, the GIL is disabled for free-threaded builds, and can be re-enabled by setting the PYTHON_GIL environment variable to 1 or running Python with -X gil 1. You can check with sys._is_gil_enabled():\n$ # Regular build: GIL is always enabled $ python3.13 -c \u0026#34;import sys; print(sys._is_gil_enabled())\u0026#34; True $ # Free-threaded build: GIL is disabled by default $ python3.13t -c \u0026#34;import sys; print(sys._is_gil_enabled())\u0026#34; False $ # Free-threaded build: re-enable with -X $ python3.13t -X gil=1 -c \u0026#34;import sys; print(sys._is_gil_enabled())\u0026#34; True $ # Free-threaded build: re-enable with env var $ PYTHON_GIL=1 python3.13t -c \u0026#34;import sys; print(sys._is_gil_enabled())\u0026#34; True References:\nhttps://docs.python.org/3.13/using/configure.html#cmdoption-disable-gil https://docs.python.org/3.13/using/cmdline.html#envvar-PYTHON_GIL https://docs.python.org/3.13/using/cmdline.html#cmdoption-X See also # Help test Python 3.13! C API Extension Support for Free Threading Free-threaded CPython is ready to experiment with! py-free-threading Improving Ecosystem Compatibility with Free-Threaded Python Header photo: \u0026ldquo;George Mayerle test chart\u0026rdquo; by US National Library of Medicine, with no known copyright restrictions.\n","date":"10 May 2024","permalink":"https://hugovk.dev/blog/2023/help-us-test-free-threaded-python-without-the-gil/","section":"Blog","summary":"","title":"Help us test free-threaded Python without the GIL"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/documentation/","section":"tags","summary":"","title":"documentation"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/javascript/","section":"tags","summary":"","title":"javascript"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/sphinx/","section":"tags","summary":"","title":"sphinx"},{"content":"On the Python Developer\u0026rsquo;s Guide and Pillow documentation we have some pages with tabs for different operating systems:\nIt\u0026rsquo;s possible to add some JavaScript so that the matching tab is activated based on the visitor\u0026rsquo;s operating system.\nHere\u0026rsquo;s how!\nSphinx Inline Tabs #First add the Sphinx Inline Tabs extension to your docs' requirements.txt:\n# requirements.txt sphinx-inline-tabs\u0026gt;=2023.4.21 JavaScript #Next, add activate_tab.js to your _static/ directory:\n// activate_tab.js // Based on https://stackoverflow.com/a/38241481/724176 function getOS() { const userAgent = window.navigator.userAgent, platform = window.navigator?.userAgentData?.platform || window.navigator.platform, macosPlatforms = [\u0026#34;macOS\u0026#34;, \u0026#34;Macintosh\u0026#34;, \u0026#34;MacIntel\u0026#34;, \u0026#34;MacPPC\u0026#34;, \u0026#34;Mac68K\u0026#34;], windowsPlatforms = [\u0026#34;Win32\u0026#34;, \u0026#34;Win64\u0026#34;, \u0026#34;Windows\u0026#34;, \u0026#34;WinCE\u0026#34;], iosPlatforms = [\u0026#34;iPhone\u0026#34;, \u0026#34;iPad\u0026#34;, \u0026#34;iPod\u0026#34;]; if (macosPlatforms.includes(platform)) { return \u0026#34;macOS\u0026#34;; } else if (iosPlatforms.includes(platform)) { return \u0026#34;iOS\u0026#34;; } else if (windowsPlatforms.includes(platform)) { return \u0026#34;Windows\u0026#34;; } else if (/Android/.test(userAgent)) { return \u0026#34;Android\u0026#34;; } else if (/Linux/.test(platform)) { return \u0026#34;Unix\u0026#34;; } return \u0026#34;unknown\u0026#34;; } function activateTab(tabName) { // Find all label elements containing the specified tab name const labels = document.querySelectorAll(\u0026#34;.tab-label\u0026#34;); labels.forEach((label) =\u0026gt; { if (label.textContent.includes(tabName)) { // Find the associated input element using the \u0026#39;for\u0026#39; attribute const tabInputId = label.getAttribute(\u0026#34;for\u0026#34;); const tabInput = document.getElementById(tabInputId); // Check if the input element exists before attempting to set the \u0026#34;checked\u0026#34; attribute if (tabInput) { // Activate the tab by setting its \u0026#34;checked\u0026#34; attribute to true tabInput.checked = true; } } }); } conf.py #Add the extension and JavaScript to your conf.py:\n# conf.py extensions = [ \u0026#34;sphinx_inline_tabs\u0026#34;, ] html_js_files = [ \u0026#34;activate_tab.js\u0026#34;, ] reStructuredText #Almost there!\nAdd tabs to the reStructuredText files.\nFor example, here we have three different commands; one for Unix, one for macOS, and one for Windows:\n.. tab:: Unix .. code-block:: shell ./python -m test -h .. tab:: macOS .. code-block:: shell ./python.exe -m test -h .. tab:: Windows .. code-block:: dosbatch .\\python.bat -m test -h Finally, add the JavaScript to the same reST page to activate the correct tab:\n.. raw:: html \u0026lt;script\u0026gt; document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, function() { activateTab(getOS()); }); \u0026lt;/script\u0026gt; You can see the results here. When the page loads, the browser finds the browser name, and activates the tabs with a matching name.\nIf you have many sets of tabs on a page, the corresponding OS tab will be activated for all. And if you click on another OS tab, all the others with the same name are activated.\nHappy tabbing!\nHeader photo: \u0026ldquo;The Great Pyramid and the Sphinx\u0026rdquo; by National Galleries of Scotland, with no known copyright restrictions.\n","date":"2 April 2024","permalink":"https://hugovk.dev/blog/2024/sphinx-docs-how-to-activate-tabs-for-your-os/","section":"Blog","summary":"","title":"Sphinx docs: How to activate tabs for your OS"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/reference/","section":"tags","summary":"","title":"reference"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/style-guide/","section":"tags","summary":"","title":"style-guide"},{"content":"Here\u0026rsquo;s some tech style guides:\nGoogle developer documentation style guide Word list Microsoft Writing Style Guide Red Hat Technical Writing Style Guide Red Hat supplementary style guide for product documentation Bishop Fox Cybersecurity Style Guide PDF Apple Style Guide Python docs style guide Canonical Documentation Style Guide Canonical reStructuredText style guide And some other style guides:\nGuardian and Observer style guide Wikipedia Manual of Style Mailchimp Content Style Guide Writing for Accessibility and more More on style guides:\nWrite the Docs And a technical writing course:\nTech Writing for Techies Header photo: \u0026ldquo;Cootamundra Cycle Club, Cootamundra, New South Wales, c. 1900\u0026rdquo; by Mitchell Library, State Library of New South Wales, with no known copyright restrictions.\n","date":"2 March 2024","permalink":"https://hugovk.dev/blog/2024/tech-style-guides/","section":"Blog","summary":"","title":"Tech style guides"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/writing/","section":"tags","summary":"","title":"writing"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/coveragepy/","section":"tags","summary":"","title":"coveragepy"},{"content":"Sometimes you have code you want to exclude from the test coverage report, because it doesn\u0026rsquo;t really make sense to test it.\nFor example, maybe you want to exclude:\nif __name__ == \u0026#34;__main__\u0026#34;: main() The old advice was to add something like this to .coveragerc:\n[report] # Regexes for lines to exclude from consideration exclude_lines = # Have to re-enable the standard pragma: pragma: no cover # Don\u0026#39;t complain if non-runnable code isn\u0026#39;t run: if __name__ == .__main__.: But since coverage.py 7.2.0 (2023-02-22) you can use exclude_also instead and skip that pragma:\n[report] # Regexes for lines to exclude from consideration exclude_also = # Don\u0026#39;t complain if non-runnable code isn\u0026#39;t run: if __name__ == .__main__.: Which is:\n[report] # Regexes for lines to exclude from consideration -exclude_lines = - # Have to re-enable the standard pragma: - pragma: no cover - +exclude_also = # Don\u0026#39;t complain if non-runnable code isn\u0026#39;t run: if __name__ == .__main__.: Thanks #To Brian Okken for the tip.\nTo Ned Batchelder for maintaining Coverage.py.\nTo the Library of Congress and Flickr Commons for the photo of a covered wagon.\n","date":"6 November 2023","permalink":"https://hugovk.dev/blog/2023/til-excludealso-with-coveragepy/","section":"Blog","summary":"","title":"TIL: exclude_also with coverage.py"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/today-i-learned/","section":"tags","summary":"","title":"today-i-learned"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/eol/","section":"tags","summary":"","title":"eol"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/linux/","section":"tags","summary":"","title":"linux"},{"content":"Python 3.7 was first released on 2018-06-27 and recently reached end-of-life on 2023-06-27 (PEP 537).\nThis means it is no longer receiving security updates and you should upgrade to a newer version (at least 3.8, but preferably 3.11):\nSource: Python Developer's Guide However, if you look at download numbers from PyPI, 3.7 still accounts for a large share. 3.7 accounted for 25% of all downloads from PyPI in July 2023, compared with 27% for 3.8: Source: pypi-tools But why does such an old Python version have so many downloads?\nAll downloads #Let\u0026rsquo;s dig into the numbers using a handy tool called pypinfo, which helps us analyse the PyPI data from Google BigQuery.\nThis command fetches all of yesterday\u0026rsquo;s downloads per Python version:\npypinfo --days 1 --percent --markdown \u0026quot;\u0026quot; pyversion\nPython version percent download count 3.8 25.00% 189,678,872 3.7 23.35% 177,150,010 3.9 20.25% 153,663,903 3.10 15.52% 117,751,108 3.11 6.90% 52,381,884 3.6 6.29% 47,749,879 2.7 2.32% 17,602,650 3.5 0.23% 1,778,388 3.4 0.10% 770,135 3.12 0.03% 224,223 3.13 0.00% 3,920 3.3 0.00% 1,165 2.8 0.00% 57 3.2 0.00% 35 None 0.00% 3 Total 758,756,232 All downloads by OS #But what happens if we check which distros are responsible for those downloads?\nThis command gives us the top 20:\npypinfo --days 1 --limit 20 --percent --markdown \u0026quot;\u0026quot; system distro pyversion\nsystem name distro name Python version percent download count Linux Ubuntu 3.8 18.87% 128,991,062 Linux Amazon Linux 3.7 14.44% 98,738,952 Linux Ubuntu 3.9 12.14% 83,019,828 Linux Ubuntu 3.10 9.66% 66,019,309 Linux Ubuntu 3.7 5.89% 40,257,060 Linux Debian GNU/Linux 3.8 5.70% 38,958,367 Linux Debian GNU/Linux 3.9 5.63% 38,482,436 Linux Debian GNU/Linux 3.7 4.25% 29,035,532 Linux Debian GNU/Linux 3.10 4.15% 28,348,346 Linux Debian GNU/Linux 3.6 3.14% 21,441,883 Linux Ubuntu 3.11 3.01% 20,570,619 Linux Debian GNU/Linux 3.11 2.72% 18,588,584 Linux Amazon Linux 3.9 2.43% 16,593,595 Linux CentOS Linux 3.6 1.70% 11,605,142 Linux Amazon Linux 3.8 1.47% 10,035,087 Linux Amazon Linux 3.10 1.46% 9,969,514 Linux Ubuntu 2.7 1.02% 6,960,697 Linux Amazon Linux AMI 3.6 0.79% 5,390,823 Linux Ubuntu 3.6 0.79% 5,388,370 Windows None 3.10 0.76% 5,227,519 Total 683,622,725 We can see Ubuntu with 3.8 is responsible for the largest share of 17%. (That\u0026rsquo;s fine, 3.8 is supported until 2024-10-14.)\nThe next is Amazon Linux with 3.7, responsible for a whopping 15% of all downloads!\nThe others responsible for 3.7 have a much lower share: Ubuntu (6%) and Debian (4%).\nTip: replace \u0026quot;\u0026quot; in the commands above with a package name to get data for just that package, for example:\npypinfo --days 1 --limit 20 --percent --markdown requests system distro pyversion\nHeader photo: Space shuttle Discovery landing at Edwards Air Force Base, California, 9th December, 1992 (source: NASA on The Commons)\n","date":"22 August 2023","permalink":"https://hugovk.dev/blog/2023/why-are-there-still-so-many-downloads-for-eol-python-37/","section":"Blog","summary":"","title":"Why are there still so many downloads for EOL Python 3.7?"},{"content":"Calling all Python library maintainers! 🐍\nThe third and final Python 3.12 release candidate is out! 🎉\nPEP 693 defines the release schedule for Python 3.12.0:\nThe first release candidate came out on 6th August 2023 The second and final release candidate came out on 6th September 2023 The third and final release candidate came out on 19th September 2023 And the full release is set for 2nd October 2023 In his announcement, Thomas Wouters, release manager for Python 3.12 and 3.13, said:\nWe strongly encourage maintainers of third-party Python projects to prepare their projects for 3.12 compatibilities during this phase, and where necessary publish Python 3.12 wheels on PyPI to be ready for the final release of 3.12.0. Any binary wheels built against Python 3.12.0rc3 will work with future versions of Python 3.12. As always, report any issues to the Python bug tracker.\nTest with 3.12 #It\u0026rsquo;s now time for us library maintainers to start testing our projects with 3.12. There\u0026rsquo;s two big benefits:\nThere have been removals and changes in Python 3.12. Testing now helps us make our code compatible and avoid any big surprises (for us and our users) at the big launch in October.\nWe might find bugs in Python itself! Reporting those will help get them fixed and help everyone.\nHow #GitHub Actions: setup-python #To test the latest alpha, beta or release candidate with actions/setup-python, add 3.12 and allow-prereleases: true to your workflow matrix.\nFor example:\njobs: test: runs-on: ubuntu-latest strategy: fail-fast: false matrix: python-version: [\u0026#34;3.8\u0026#34;, \u0026#34;3.9\u0026#34;, \u0026#34;3.10\u0026#34;, \u0026#34;3.11\u0026#34;, \u0026#34;3.12\u0026#34;] steps: - uses: actions/checkout@v4 - name: Set up Python ${{ matrix.python-version }} uses: actions/setup-python@v4 with: python-version: ${{ matrix.python-version }} allow-prereleases: true (We can instead use 3.12-dev and omit allow-prereleases: true, but I find the above a bit neater, and when 3.12.0 final is released in October, it will continue testing with full release versions.)\nGitHub Actions: deadsnakes #For the bleeding edge, we can use deadsnakes/action to test the latest nightly build:\njobs: test: runs-on: ubuntu-latest strategy: fail-fast: false matrix: python-version: [\u0026#34;3.8\u0026#34;, \u0026#34;3.9\u0026#34;, \u0026#34;3.10\u0026#34;, \u0026#34;3.11\u0026#34;, \u0026#34;3.12-dev\u0026#34;] steps: - uses: actions/checkout@v3 - name: Set up Python ${{ matrix.python-version }} if: \u0026#34;!endsWith(matrix.python-version, \u0026#39;-dev\u0026#39;)\u0026#34; uses: actions/setup-python@v4 with: python-version: ${{ matrix.python-version }} - uses: deadsnakes/action@v3.0.0 name: Set up Python ${{ matrix.python-version }} (deadsnakes) if: endsWith(matrix.python-version, \u0026#39;-dev\u0026#39;) with: python-version: ${{ matrix.python-version }} Travis CI #I recommend moving to another CI.\nIn the meantime, you can also add 3.12-dev to .travis.yml, although at the time of writing it\u0026rsquo;s pointing to 3.12.0a3+ from 2022-12-07, which is better than nothing.\nlanguage: python python: - \u0026#34;3.8\u0026#34; - \u0026#34;3.9\u0026#34; - \u0026#34;3.10\u0026#34; - \u0026#34;3.11\u0026#34; - \u0026#34;3.12-dev\u0026#34; Again, I recommend moving to another CI.\nOther CIs #Do you use other CIs? Please leave a comment if you know how to test 3.12!\nWhen to support 3.12? #Now is also a good time to declare support and add the Programming Language :: Python :: 3.12 Trove classifier.\nEspecially if you have C extensions and other projects depend on yours, a release with wheels will help them test and prepare.\nABI breaks? #From the announcement:\nThere will be no ABI changes from this point forward in the 3.12 series. The intent is for the final release of 3.12.0, scheduled for Monday, 2023-10-02, to be identical to this release candidate. This really is the last chance to find critical problems in Python 3.12.\nLet\u0026rsquo;s start testing and releasing for 3.12 now! 🚀\nHeader photo: The carpet of the Salt Palace Convention Center grand ballroom, host of PyCon 2023, with a couple of googly eyes added to make them Pythony (source)\n2023-08-14: Updated for RC1\n2023-09-06: Updated for RC2\n2023-09-19: Updated for RC3\n","date":"26 May 2023","permalink":"https://hugovk.dev/blog/2023/help-test-python-312-beta/","section":"Blog","summary":"","title":"Help test the Python 3.12 release candidate!"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/cron/","section":"tags","summary":"","title":"cron"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/github/","section":"tags","summary":"","title":"github"},{"content":"GitHub Actions has a useful feature to trigger workflows on a cron schedule. For example:\nname: Test on: push: pull_request: schedule: - cron: \u0026#34;0 6 * * *\u0026#34; # daily at 6am jobs: test: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 But if a contributor has enabled GitHub Actions on their fork (which I recommend: test your contributions before opening a PR), it also runs the cron on their fork. This not only uses up extra CI resources on the fork:\nIt also sends a regular email to the contributor when the workflow fails:\nInstead, we only need to run the cron for the upstream. For example, add:\njobs: test: + if: ${{ github.event.repository.fork == false || github.event_name != \u0026#39;schedule\u0026#39; }} runs-on: ubuntu-latest This only runs the schedule trigger for the (non-fork) upstream, and all other triggers run for both upstream and forks.\nAlso #For simpler workflows that only trigger on a cron, such as stalebot or CodeQL runs, we can add a simpler condition.\nFor example:\nname: Close stale issues on: schedule: - cron: \u0026#34;10 0 * * *\u0026#34; # daily at 12:10am jobs: stale: runs-on: ubuntu-latest steps: - name: \u0026#34;Check issues\u0026#34; uses: actions/stale@v8 We can completely disable it for forks:\njobs: stale: + if: github.event.repository.fork == false runs-on: ubuntu-latest PS #Use single quotes in these lines, double quotes are invalid here (Unexpected symbol).\nThanks #To Alex Waygood for the tip.\nTo the British Library and Flickr Commons for the illustration of a chronograph.\nUpdate #2025-04-28: Instead of hardcoding the upstream repo\u0026rsquo;s owner with github.repository_owner == 'octocat', use github.event.repository.fork == false. This makes it easier to diff across projects in different organisations and consistent config makes for easier maintenance.\n","date":"7 May 2023","permalink":"https://hugovk.dev/blog/2023/til-how-to-disable-cron-for-github-forks/","section":"Blog","summary":"","title":"TIL: how to disable cron for GitHub forks"},{"content":"Want to print out the PyCon US 2023 schedule? Paper doesn\u0026rsquo;t run out of batteries, is easy to scribble on, and stuff into a pocket.\nHere\u0026rsquo;s some custom CSS and JavaScript to make it nicely printable.\nInstall the Styler browser extension\nView a PyCon schedule page such as https://us.pycon.org/2023/schedule/talks/ and click the Styler extension\u0026rsquo;s S icon\nPaste this CSS into the upper box:\nbody.pycon-schedule aside.sidebar, body.pycon-schedule div.badges, body.pycon-schedule button.menu-button.open-menu, body.pycon-schedule button#theme-switch, body.pycon-schedule footer { display: none; } body.pycon-schedule { font-size: 14px; } body.pycon-schedule main { padding: 0 !important; } body.pycon-schedule .calendar { left: auto !important; width: 100% !important; } @media print { a:after { content:\u0026#39;\u0026#39;; } a[href]:after { content: none !important; } } Paste this JavaScript into the lower box: $(document).ready(function () { if ( window.location.pathname.match(\u0026#34;2023/schedule/\u0026#34;) \u0026amp;\u0026amp; !window.location.pathname.match(\u0026#34;2023/schedule/presentation/\u0026#34;) ) { $(\u0026#34;body\u0026#34;).addClass(\u0026#34;pycon-schedule\u0026#34;); } }); Print! It\u0026rsquo;ll run on any of the https://us.pycon.org/2023/schedule/* pages, but not the individual presentation pages such as https://us.pycon.org/2023/schedule/presentation/88/\nOnce printed, you can click the Styler icon and the x button to disable Styler for the site so you can browse the original version.\n","date":"15 April 2023","permalink":"https://hugovk.dev/blog/2023/printable-pycon-2023-schedule/","section":"Blog","summary":"","title":"Printable PyCon 2023 schedule"},{"content":"What I built #I built a Mastodon bot that posts a a different bit of Pluto every six hours.\nCategory Submission #Wacky Wildcard\nApp Link #https://botsin.space/@bitsofpluto\nScreenshots #https://botsin.space/@bitsofpluto/109854013035140138 https://botsin.space/@bitsofpluto/109878078918934666 https://botsin.space/@bitsofpluto/109882325572738354 https://botsin.space/@bitsofpluto/109872416513104327 https://botsin.space/@bitsofpluto/109869584884331747 https://botsin.space/@bitsofpluto/109835610772369900 https://botsin.space/@bitsofpluto/109828532816033685 https://botsin.space/@bitsofpluto/109845519798723221 Description #Bits of Pluto posts a different bit of Pluto to Mastodon every six hours. Each is a crop from an image by NASA\u0026rsquo;s New Horizons spacecraft.\nLink to Source Code #https://github.com/hugovk/bitsofpluto\nPermissive License #MIT\nBackground #For decades, Pluto had only been a speck of light until the NASA\u0026rsquo;s Hubble Space Telescope captured it in never-before-seen detail:\nJust a few years later, I followed the journey of NASA\u0026rsquo;s New Horizons spacecraft in awe as it flew past Pluto, in the far depths of our solar system.\nLike many others I was especially struck by the beautiful photographs it shot, especially this large, detailed image:\nAs NASA describe it:\nNASA’s New Horizons spacecraft captured this high-resolution enhanced color view of Pluto on July 14, 2015. The image combines blue, red and infrared images taken by the Ralph/Multispectral Visual Imaging Camera (MVIC). Pluto’s surface sports a remarkable range of subtle colors, enhanced in this view to a rainbow of pale blues, yellows, oranges, and deep reds. Many landforms have their own distinct colors, telling a complex geological and climatological story that scientists have only just begun to decode. The image resolves details and colors on scales as small as 0.8 miles (1.3 kilometers). The viewer is encouraged to zoom in on the full resolution image on a larger screen to fully appreciate the complexity of Pluto’s surface features.\nI second the recommendation to zoom in on the full resolution! The detail and is astounding, especially compared to the Hubble image.\nI thought it would be fascinating to chop this up and put it in a social media feed to enjoy different aspects of the detail, to punctuate the doomscrolling with a moment of wonder.\nHow I built it #I built the bot in Python. Originally it posted to Twitter, but as the future of bots on Twitter is less than certain, the time was ready to port it over to Mastodon where bots are welcome.\nOn the way, I learned how to calculate brightness in images, how to use the Mastodon API, and how to set up a bot on Linode and (the appropriately-named!) botsin.space.\nThe bot does two things:\nGet a bit of Pluto Post to Mastodon 1. Get a bit of Pluto #The bitsofpluto() function takes a single parameter, the path to the full resolution Pluto image.\nThe image is opened using Pillow.\nWe then choose a random width for the image, somewhere between 800 and 2000 pixels, with height is set to ¾ the width. This is to give a different zoom level each time. We then randomly select a window to crop. This is our potential bit of Pluto.\nBut we don\u0026rsquo;t stop there. The image has quite a large background of empty black (or nearly black) space. We don\u0026rsquo;t want to post that. So we sample 9 points from the image (corners, centre point, and bisecting points) and measure the brightness where 0 is black and 255 is white. If brightness is under 10, we count it as a dark point. If there are 6 or less, we save the image to a temporary directory.\nOtherwise if there are too many dark points, we discard this crop, and start again from the top. I came up with these figures of 10 and 7 through trial-and-error. It\u0026rsquo;s quite nice to sometimes get an image with a corner of Pluto\u0026rsquo;s curvature against the darkness of space:\n2. Post to Mastodon #We use the Mastodon.py library to via the Mastodon API.\nThe toot_it() function first reads in the credentials for posting. I generated them using a helper script I wrote based upon Allison Parrish\u0026rsquo;s instructions.\nOnce authenticated, there\u0026rsquo;s a two-step process for posting:\nUpload the image using api.media_post(), which returns a reference to the media Create the Mastodon post, using the media reference Hosting #Linode #The bot code is hosted on Linode. The nice thing about Mastodon bots is that they rarely need expensive or high-end hosting. I created a Linode using the cheapest option: for $5/month the \u0026ldquo;Nanode 1 GB\u0026rdquo; plan gives 1 GB RAM, 1 CPU and 25 GB storage, more than enough for our needs.\nI chose a Ubuntu 22.04 LTS image: LTS means \u0026ldquo;long-term support\u0026rdquo;, it will be supported for 5 years, until April 2027. And I chose the Frankfurt, DE region because it\u0026rsquo;s closest to me.\nAfter creating a user, I logged in via SSH, and cloned the bitsofpluto repo.\nI ran crontab -e to schedule it to run once every six hours:\n0 */6 * * * /home/botuser/bin/scheduled/0000-06-repeat.sh \u0026gt; /tmp/logs/0000-06-repeat.log Where 0000-06-repeat.sh contains:\n#!/bin/bash #set -e mkdir -p /tmp/logs/ ~/github/bitsofpluto/crontask.sh \u0026gt; /tmp/logs/bitsofpluto.log 2\u0026gt;\u0026amp;1 Which, when the cron triggers, switches to the repo, fetches any recent changes, and then runs the bot to make a post:\npython3 bitsofpluto.py --yaml ~/bin/data/bitsofpluto.yaml --no-web botsin.space #The bot\u0026rsquo;s Mastodon account is on Colin Mitchell\u0026rsquo;s botsin.space instance, home to many other excellent bots.\nAdditional Resources/Info #I\u0026rsquo;ve made two other Mastodon bots:\n@tiny_bus_stop - uses Tracery and Cheap Bots, Toot Sweet! @FlagFacts - uses Python Enjoy!\n","date":"18 February 2023","permalink":"https://hugovk.dev/blog/2023/bits-of-pluto-on-mastodon/","section":"Blog","summary":"","title":"Bits of Pluto on Mastodon"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/bots/","section":"tags","summary":"","title":"bots"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/linode-hackathon/","section":"tags","summary":"","title":"linode-hackathon"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/mastodon/","section":"tags","summary":"","title":"mastodon"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/open-source/","section":"tags","summary":"","title":"open-source"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/deprecation/","section":"tags","summary":"","title":"deprecation"},{"content":"Why? #Often Python core developers think about deprecating and removing old bits of the language. But first it\u0026rsquo;s a good idea to get an idea of how much the old bits are used. Searching the 5,000 most-popular projects on PyPI is a helpful proxy to gauge community use.\nHow? #Core developer Victor Stinner has written a couple of useful scripts that live in his misc repo.\nSetup #First, clone the repo somewhere, doesn\u0026rsquo;t matter where:\nmkdir -p ~/github cd ~/github/ git clone https://github.com/vstinner/misc # Optionally for some colour in the logs: python3 -m pip install termcolor Then download 5,000 sdists! Again, doesn\u0026rsquo;t matter where:\n$ mkdir -p ~/top-pypi/output $ cd ~/top-pypi/output/ $ python3 ~/github/misc/cpython/download_pypi_top.py . Download JSON from: https://hugovk.github.io/top-pypi-packages/top-pypi-packages-30-days.min.json Project#: 5000 [1/5000] Saving to ./boto3-1.26.25.tar.gz (101.7 kB) [2/5000] Saving to ./botocore-1.29.25.tar.gz (10426.8 kB) [3/5000] Saving to ./urllib3-1.26.13.tar.gz (293.4 kB) ... [4990/5000] Saving to ./meld3-2.0.1.tar.gz (35.3 kB) [4991/5000] Saving to ./browserstack-local-1.2.4.tar.gz (6.6 kB) Cannot find URL for project: allensdk Cannot find URL for project: dataframe-image [4994/5000] Saving to ./SQLAlchemy-Continuum-1.3.13.tar.gz (79.2 kB) [4995/5000] Saving to ./sarge-0.1.7.post1.tar.gz (25.1 kB) [4996/5000] Saving to ./confusable_homoglyphs-3.2.0.tar.gz (158.1 kB) [4997/5000] Saving to ./YTThumb-1.4.5.tar.gz (3.0 kB) [4998/5000] Saving to ./azure-ai-ml-1.2.0.zip (4486.3 kB) [4999/5000] Saving to ./pythena-1.6.0.tar.gz (5.2 kB) [5000/5000] Saving to ./interchange-2021.0.4.tar.gz (25.2 kB) Downloaded 5000 projects in 1602.4 seconds With colour:\n⏳ This will take a bit of time. Some projects don\u0026rsquo;t have sdists, nothing to worry about, we will still end up with a good number. At the time of writing (2022-12-09), it took me just under 27 minutes to download 4,748 files, taking up 5.37 GB of space.\nIf you want to download fewer, specify how many:\npython3 ~/github/misc/cpython/download_pypi_top.py . 100 Search #Next, we can search all the sdists using another script. And we don\u0026rsquo;t need to extract them!\nFor example, configparser\u0026rsquo;s LegacyInterpolation was deprecated in Python 3.2 (released February 2011), but only in docs and without raising a DeprecationWarning.\nHow much is it used in the top 5k?\n$ cd ~/top-pypi/output/ $ python3 ~/github/misc/cpython/search_pypi_top.py -q . \u0026#34;LegacyInterpolation\u0026#34; ./hexbytes-0.3.0.tar.gz: hexbytes-0.3.0/.tox/lint/lib/python3.9/site-packages/mypy/typeshed/stdlib/configparser.pyi: \u0026#34;LegacyInterpolation\u0026#34;, ./hexbytes-0.3.0.tar.gz: hexbytes-0.3.0/.tox/lint/lib/python3.9/site-packages/mypy/typeshed/stdlib/configparser.pyi: class LegacyInterpolation(Interpolation): ./hexbytes-0.3.0.tar.gz: hexbytes-0.3.0/.tox/py39-lint/lib/python3.9/site-packages/mypy/typeshed/stdlib/configparser.pyi: \u0026#34;LegacyInterpolation\u0026#34;, ./hexbytes-0.3.0.tar.gz: hexbytes-0.3.0/.tox/py39-lint/lib/python3.9/site-packages/mypy/typeshed/stdlib/configparser.pyi: class LegacyInterpolation(Interpolation): ./jedi-0.18.2.tar.gz: jedi-0.18.2/jedi/third_party/typeshed/stdlib/3/configparser.pyi: class LegacyInterpolation(Interpolation): ... ./mypy-0.991.tar.gz: mypy-0.991/mypy/typeshed/stdlib/configparser.pyi: \u0026#34;LegacyInterpolation\u0026#34;, ./mypy-0.991.tar.gz: mypy-0.991/mypy/typeshed/stdlib/configparser.pyi: class LegacyInterpolation(Interpolation): ./eth-hash-0.5.1.tar.gz: eth-hash-0.5.1/.tox/lint/lib/python3.9/site-packages/mypy/typeshed/stdlib/configparser.pyi: \u0026#34;LegacyInterpolation\u0026#34;, ./eth-hash-0.5.1.tar.gz: eth-hash-0.5.1/.tox/lint/lib/python3.9/site-packages/mypy/typeshed/stdlib/configparser.pyi: class LegacyInterpolation(Interpolation): ./eth-account-0.7.0.tar.gz: eth-account-0.7.0/.tox/lint/lib/python3.10/site-packages/mypy/typeshed/stdlib/configparser.pyi: class LegacyInterpolation(Interpolation): ./eth-account-0.7.0.tar.gz: eth-account-0.7.0/.tox/py310-lint/lib/python3.10/site-packages/mypy/typeshed/stdlib/configparser.pyi: class LegacyInterpolation(Interpolation): ./eth-utils-2.1.0.tar.gz: eth-utils-2.1.0/.tox/lint/lib/python3.9/site-packages/mypy/typeshed/stdlib/configparser.pyi: class LegacyInterpolation(Interpolation): ./pytype-2022.11.29.tar.gz: pytype-2022.11.29/pytype/typeshed/stdlib/configparser.pyi: \u0026#34;LegacyInterpolation\u0026#34;, ./pytype-2022.11.29.tar.gz: pytype-2022.11.29/pytype/typeshed/stdlib/configparser.pyi: class LegacyInterpolation(Interpolation): ./pylint-2.15.8.tar.gz: pylint-2.15.8/pylint/checkers/stdlib.py: \u0026#34;LegacyInterpolation\u0026#34;, ./pyre-check-0.9.17.tar.gz: pyre-check-0.9.17/typeshed/stdlib/configparser.pyi: \u0026#34;LegacyInterpolation\u0026#34;, ./pyre-check-0.9.17.tar.gz: pyre-check-0.9.17/typeshed/stdlib/configparser.pyi: class LegacyInterpolation(Interpolation): ./configparser-5.3.0.tar.gz: configparser-5.3.0/src/backports/configparser/__init__.py: \u0026#34;LegacyInterpolation\u0026#34;, ./configparser-5.3.0.tar.gz: configparser-5.3.0/src/backports/configparser/__init__.py: class LegacyInterpolation(Interpolation): ./configparser-5.3.0.tar.gz: configparser-5.3.0/src/backports/configparser/__init__.py: \u0026#34;LegacyInterpolation has been deprecated since Python 3.2 \u0026#34; ./configparser-5.3.0.tar.gz: configparser-5.3.0/src/configparser.py: LegacyInterpolation, ./configparser-5.3.0.tar.gz: configparser-5.3.0/src/configparser.py: \u0026#34;LegacyInterpolation\u0026#34;, ./configparser-5.3.0.tar.gz: configparser-5.3.0/src/test_configparser.py: elif isinstance(self.interpolation, configparser.LegacyInterpolation): ./configparser-5.3.0.tar.gz: configparser-5.3.0/src/test_configparser.py: elif isinstance(self.interpolation, configparser.LegacyInterpolation): ./configparser-5.3.0.tar.gz: configparser-5.3.0/src/test_configparser.py: elif isinstance(self.interpolation, configparser.LegacyInterpolation): ./configparser-5.3.0.tar.gz: configparser-5.3.0/src/test_configparser.py: class ConfigParserTestCaseLegacyInterpolation(ConfigParserTestCase): ./configparser-5.3.0.tar.gz: configparser-5.3.0/src/test_configparser.py: interpolation = configparser.LegacyInterpolation() ./configparser-5.3.0.tar.gz: configparser-5.3.0/src/test_configparser.py: configparser.LegacyInterpolation() ./eth-rlp-0.3.0.tar.gz: eth-rlp-0.3.0/.tox/lint/lib/python3.9/site-packages/mypy/typeshed/stdlib/3/configparser.pyi: class LegacyInterpolation(Interpolation): ... ./eth-rlp-0.3.0.tar.gz: eth-rlp-0.3.0/venv-erlp/lib/python3.9/site-packages/jedi/third_party/typeshed/stdlib/3/configparser.pyi: class LegacyInterpolation(Interpolation): ... ./eth-rlp-0.3.0.tar.gz: eth-rlp-0.3.0/venv-erlp/lib/python3.9/site-packages/mypy/typeshed/stdlib/3/configparser.pyi: class LegacyInterpolation(Interpolation): ... ./eth_abi-3.0.1.tar.gz: eth_abi-3.0.1/.tox/lint/lib/python3.10/site-packages/mypy/typeshed/stdlib/configparser.pyi: class LegacyInterpolation(Interpolation): Time: 0:00:17.957695 Found 32 matching lines in 12 projects With colour:\nAnswer: very little, mostly backports and type stubs. This told us it\u0026rsquo;s a good candidate for removal, so a proper DeprecationWarning was added in Python 3.11 (released October 2022) and it will be removed in Python 3.13 (October 2024).\nThe tool searches using a regex, so you can look for more complicated things like \u0026quot;\\b(currentThread|activeCount|notifyAll|isSet|isDaemon|setDaemon)\\b\u0026quot;, and it can also log to file. See --help for other options.\nHappy searching! 🔎\nHeader photo: \u0026ldquo;The card index department\u0026rdquo; by Boston Public Library is licensed under CC BY 2.0.\n","date":"9 December 2022","permalink":"https://hugovk.dev/blog/2022/how-to-search-5000-python-projects/","section":"Blog","summary":"","title":"How to search 5,000 Python projects"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/search/","section":"tags","summary":"","title":"search"},{"content":"Calling all Python library maintainers! 🐍\nPython 3.11 is in beta! 🎉\nPEP 664 defines the release schedule for Python 3.11.0:\nThe second beta came out on 31st May 2022 The first release candidate is set for 1st August 2022 And the full release is set for 3rd October 2022 In his announcement, Pablo Galindo Salgado, release manager for Python 3.10 and 3.11, said:\nWe strongly encourage maintainers of third-party Python projects to test with 3.11 during the beta phase and report issues found to the Python bug tracker as soon as possible. While the release is planned to be feature complete entering the beta phase, it is possible that features may be modified or, in rare cases, deleted up until the start of the release candidate phase (Monday, 2021-08-02). Our goal is have no ABI changes after beta 4 and as few code changes as possible after 3.11.0rc1, the first release candidate. To achieve that, it will be extremely important to get as much exposure for 3.11 as possible during the beta phase.\nTest with 3.11 #It\u0026rsquo;s now time for library maintainers to start testing 3.11 with your project. You don\u0026rsquo;t need to declare support and release for 3.11 yet, but there\u0026rsquo;s two big benefits to testing with 3.11 on CI:\nThere have been removals and changes in Python 3.11. Testing now will help you make your code compatible and avoid any big surprises (for you and your users) at the big launch in October.\nYou might find bugs in Python itself! Reporting those will help get them fixed and help everyone.\nHow #GitHub Actions: setup-python #To test the latest alpha, beta or release candidate with actions/setup-python, add 3.11-dev to your workflow matrix.\nFor example:\njobs: build: runs-on: ubuntu-latest strategy: fail-fast: false matrix: python-version: [\u0026#34;3.7\u0026#34;, \u0026#34;3.8\u0026#34;, \u0026#34;3.9\u0026#34;, \u0026#34;3.10\u0026#34;, \u0026#34;3.11-dev\u0026#34;] steps: - uses: actions/checkout@v3 - name: Set up Python ${{ matrix.python-version }} uses: actions/setup-python@v4 with: python-version: ${{ matrix.python-version }} GitHub Actions: deadsnakes #For the bleeding edge, we can use deadsnakes/action to test the latest nightly build:\njobs: build: runs-on: ubuntu-latest strategy: fail-fast: false matrix: python-version: [\u0026#34;3.7\u0026#34;, \u0026#34;3.8\u0026#34;, \u0026#34;3.9\u0026#34;, \u0026#34;3.10\u0026#34;, \u0026#34;3.11-dev\u0026#34;] steps: - uses: actions/checkout@v3 - name: Set up Python ${{ matrix.python-version }} if: \u0026#34;!endsWith(matrix.python-version, \u0026#39;-dev\u0026#39;)\u0026#34; uses: actions/setup-python@v3 with: python-version: ${{ matrix.python-version }} - uses: deadsnakes/action@v2.1.1 name: Set up Python ${{ matrix.python-version }} (deadsnakes) if: endsWith(matrix.python-version, \u0026#39;-dev\u0026#39;) with: python-version: ${{ matrix.python-version }} Travis CI #I recommend moving to another CI.\nIn the meantime, you can also add 3.11-dev to .travis.yml, although at the time of writing it\u0026rsquo;s pointing to 3.11.0a3 from 2021-12-08, which is better than nothing.\nlanguage: python python: - \u0026#34;3.7\u0026#34; - \u0026#34;3.8\u0026#34; - \u0026#34;3.9\u0026#34; - \u0026#34;3.10\u0026#34; - \u0026#34;3.11-dev\u0026#34; Again, I recommend moving to another CI.\nOther CIs #Do you use other CIs? Please leave a comment if you know how to test 3.11!\nWhen to support 3.11? #When should you declare support and add the Programming Language :: Python :: 3.11 Trove classifier?\nFirst of all, make sure your tests pass on 3.11 beta. One option is waiting until 3.11.0 final is released.\nOr, as mentioned above:\nOur goal is have no ABI changes after beta 4 and as few code changes as possible after 3.11.0rc1, the first release candidate.\nIf you have a pure Python project, you could release now.\nIf you have C extensions, you might want to wait until the release candidate phase, although if other projects depend on yours, a preview release would help them test and prepare.\nIn any case, start testing 3.11 now!\nHeader photo: Uppland Runic Inscription 53, a 1,000 year old runestone in the old town of Stockholm (source)\n","date":"31 May 2022","permalink":"https://hugovk.dev/blog/2022/help-test-python-311/","section":"Blog","summary":"","title":"Help test Python 3.11 beta!"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/automation/","section":"tags","summary":"","title":"automation"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/data/","section":"tags","summary":"","title":"data"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/json/","section":"tags","summary":"","title":"json"},{"content":"Top PyPI Packages is a website that creates a monthly dump of the 5,000 most-downloaded packages from the Python Package Index (PyPI). It provides a human-readable list and a machine-readable JSON file for programmatic use.\nHow it\u0026rsquo;s used #The generated data is important for the Python community: it has been cited by many academic papers, covering research on topics such as software supply-chain attacks, genetic algorithms, neural type hints and technical debt.\nWebsites also use the data for analysing things like community adoption of Python 3 and of wheels package files, and for automated dependency updates.\nSome are listed here.\nLast but not least, CPython core developers often use the data for community analysis, for example to check how widespread certain language features are when considering deprecations and removals, or API changes of Python itself.\nSome examples:\nhttps://mail.python.org/archives/search?q=top-pypi-packages\nHow it works #It runs on the cheapest DigitalOcean Droplet to query a Google BigQuery dataset from the Python Software Foundation, and builds the JSON file from that. The data is automatically committed from the droplet back to the GitHub repository, and GitHub Actions is used to automatically tag and create a release, which then creates a Digital Object Identifier (DOI) at Zenodo to help make it citable for researchers.\nIn more detail #A \u0026ldquo;Droplet\u0026rdquo; is the name DigitalOcean uses for virtual machines, which is basically a Linux server. I\u0026rsquo;m using the cheapest $5/month running Ubuntu 20.04 (LTS) plus $1/month for automated backups. (In July 2022, I\u0026rsquo;ll switch to the new $4/month Droplet.)\nOn the first of the month, it runs a cron job:\n13 11 1 * * ( eval \u0026#34;$(ssh-agent -s)\u0026#34;; ssh-add ~/.ssh/id_rsa-top-pypi-packages; /home/botuser/github/top-pypi-packages/top-pypi-packages.sh ) \u0026gt; /tmp/top-pypi-packages.log 2\u0026gt;\u0026amp;1 This script runs some others to call pypinfo:\n/home/botuser/.local/bin/pypinfo --json --indent 0 --limit 5000 --days 30 \u0026#34;\u0026#34; project \u0026gt; top-pypi-packages-30-days.json PyPI streams data about downloads to Google BigQuery which are accessible as a public dataset. Google provides a free amount of queries per month, and I\u0026rsquo;ve been adjusting the amount of data fetched to stay within the free quota (e.g. changing from the top 5k packages to 4k; it used to get data for top packages over the past 30 days and 365 days, but now only for 30 days; and bumping back up to 5k packages).\npypinfo is a handy command-line interface (CLI) to access this BigQuery data and dump it to a JSON file.\nAnother handy CLI tool called jq minifies the JSON data:\njq -c . \u0026lt; top-pypi-packages-30-days.json \u0026gt; top-pypi-packages-30-days.min.json These are then committed back to the repo, tagged using CalVer (e.g. 2022-05) and pushed. GitHub Actions creates a release from the tag.\nThis then creates a Digital Object Identifier (DOI) at Zenodo to help make it citable for researchers.\nThe website, on GitHub Pages, reads in the generated JSON file and shows the top 100 (or 1,000 or 5,000) packages in human-readable form. It\u0026rsquo;s based on Python Wheels, which in nice circular fashion, uses the JSON data from this project.\nThanks #Thanks to PyPI and Google BigQuery for the data; pypinfo and jq for the tools; Python Wheels for making their code open source; and DigitalOcean for sponsoring this project\u0026rsquo;s hosting. Visit https://do.co/oss-sponsorship to see if your project is eligible.\nHeader photo: \u0026ldquo;PACKAGES\u0026rdquo; by marc falardeau is licensed under CC BY 2.0.\n","date":"29 May 2022","permalink":"https://hugovk.dev/blog/2022/top-pypi-packages/","section":"Blog","summary":"","title":"Top PyPI Packages"},{"content":"Or, a variation on the Norway problem #Short version: put quotes around version numbers in YAML.\nThe Norway problem #The Norway problem is when you put this in YAML:\ncountries: - GB - IE - FR - DE - NO But get this out:\n\u0026gt;\u0026gt;\u0026gt; import yaml \u0026gt;\u0026gt;\u0026gt; with open(\u0026#34;countries.yml\u0026#34;) as f: ... yaml.safe_load(f) ... {\u0026#39;countries\u0026#39;: [\u0026#39;GB\u0026#39;, \u0026#39;IE\u0026#39;, \u0026#39;FR\u0026#39;, \u0026#39;DE\u0026#39;, False]} 😱\nThe Norway fix #Use quotes:\ncountries: - \u0026#34;GB\u0026#34; - \u0026#34;IE\u0026#34; - \u0026#34;FR\u0026#34; - \u0026#34;DE\u0026#34; - \u0026#34;NO\u0026#34; \u0026gt;\u0026gt;\u0026gt; with open(\u0026#34;countries.yml\u0026#34;) as f: ... yaml.safe_load(f) ... {\u0026#39;countries\u0026#39;: [\u0026#39;GB\u0026#39;, \u0026#39;IE\u0026#39;, \u0026#39;FR\u0026#39;, \u0026#39;DE\u0026#39;, \u0026#39;NO\u0026#39;]} 🇳🇴 ✅\nThe Python 3.1 problem #A similar problem will affect the Python community in October 2021, when Python 3.10 comes out.\nWhy?\nWhen 3.10 is added to YAML, for example in CI test matrix config, it\u0026rsquo;s interpreted as a float. This:\npython-version: [3.6, 3.7, 3.8, 3.9, 3.10, pypy3] Turns into this:\n\u0026gt;\u0026gt;\u0026gt; import yaml \u0026gt;\u0026gt;\u0026gt; with open(\u0026#34;versions.yml\u0026#34;) as f: ... yaml.safe_load(f) ... {\u0026#39;python-version\u0026#39;: [3.6, 3.7, 3.8, 3.9, 3.1, \u0026#39;pypy3\u0026#39;]} CI failed! It\u0026rsquo;s not 2009! Python 3.1 not found!\n😱\nRelatedly, 3.10-dev without quotes works because it\u0026rsquo;s interpreted as a string. But when deleting -dev, 3.10 is interpreted as a float.\nThe Python 3.10 fix #Version numbers are strings, not floats. Use quotes:\npython-version: [\u0026#34;3.6\u0026#34;, \u0026#34;3.7\u0026#34;, \u0026#34;3.8\u0026#34;, \u0026#34;3.9\u0026#34;, \u0026#34;3.10\u0026#34;, \u0026#34;pypy3\u0026#34;] \u0026gt;\u0026gt;\u0026gt; import yaml \u0026gt;\u0026gt;\u0026gt; with open(\u0026#34;versions.yml\u0026#34;) as f: ... yaml.safe_load(f) ... {\u0026#39;python-version\u0026#39;: [\u0026#39;3.6\u0026#39;, \u0026#39;3.7\u0026#39;, \u0026#39;3.8\u0026#39;, \u0026#39;3.9\u0026#39;, \u0026#39;3.10\u0026#39;, \u0026#39;pypy3\u0026#39;]} 🐍 ✅\nSee also #flake8-2020 is a useful Flake8 plugin to find Python 3.10 and other bugs caused by assumptions about the length of version numbers when using sys.version and sys.version_info.\nHeader photo: \u0026ldquo;zero\u0026rdquo; by Leo Reynolds is licensed under CC BY-NC-SA 2.0.\n","date":"19 May 2021","permalink":"https://hugovk.dev/blog/2021/the-python-3-1-problem/","section":"Blog","summary":"","title":"The Python 3.1 problem"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/yaml/","section":"tags","summary":"","title":"yaml"},{"content":"January 2016 — December 2019 #To celebrate the end of life of Python 2 on 1st January 2020, here’s some statistics showing how much different Python versions have been used over four years.\nHere’s the pip installs for all packages from the Python Package Index (PyPI), between January 2016 and December 2019:\npip #The package installer\nsix #Python 2 and 3 compatibility library\nNumPy #Scientific computing library\npytest #Testing framework\npandas #Data analysis toolkit\nCoverage.py #Code coverage testing\nPillow #Imaging library\nDjango #Web framework\nMatplotlib #2D plotting library\nFlake8 #Linter\nPylint #Linter\nTensorFlow #Machine learning library\npylast #Interface to Last.fm\nHow #Statistics were collected using pypi-trends.py, a wrapper around pypinfo and pypistats to fetch all monthly downloads from the PyPI database on Google BigQuery and save them as JSON files. Data was downloaded over several days as getting all months uses up a lot of free BigQuery quota. Then jsons2csv.py plots a chart using matplotlib. Raw JSON data is in the repo.\nSee also # Data Driven Decisions Using PyPI Download Statistics Python version share over time, 1 (January 2016 — June 2018) Python version share over time, 2 (January 2016 — October 2018) Python version share over time, 3 (January 2016 — December 2018) Python version share over time, 4 (January 2016 — March 2019) Python version share over time, 5 (January 2016 — October 2019) PyPI Stats: See package download data for the past 180 days, without needing to sign up for BigQuery pypistats: A command-line tool to access data from PyPI Stats ","date":"1 January 2020","permalink":"https://hugovk.dev/blog/2020/python-version-share-over-time-6/","section":"Blog","summary":"","title":"Python version share over time, 6"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/python2/","section":"tags","summary":"","title":"python2"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/python3/","section":"tags","summary":"","title":"python3"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/statistics/","section":"tags","summary":"","title":"statistics"},{"content":"January 2016 — October 2019 #To celebrate the release of Python 3.8.0 on 14th October 2019, and with less than two months left for Python 2, here’s some statistics showing how much different Python versions have been used over nearly four years.\nHere’s the pip installs for all packages from the Python Package Index (PyPI), between January 2016 and October 2019:\npip #The package installer\nsix #Python 2 and 3 compatibility library\nNumPy #Scientific computing library\npytest #Testing framework\npandas #Data analysis toolkit\nCoverage.py #Code coverage testing\nPillow #Imaging library\nDjango #Web framework\nMatplotlib #2D plotting library\nFlake8 #Linter\nPylint #Linter\npylast #Interface to Last.fm\nHow #Statistics were collected using pypi-trends.py, a wrapper around pypinfo and pypistats to fetch all monthly downloads from the PyPI database on Google BigQuery and save them as JSON files. Data was downloaded over several days as getting all months uses up a lot of free BigQuery quota. Then jsons2csv.py plots a chart using matplotlib. Raw JSON data is in the repo.\nSee also # Data Driven Decisions Using PyPI Download Statistics Python version share over time, 1 (January 2016 — June 2018) Python version share over time, 2 (January 2016 — October 2018) Python version share over time, 3 (January 2016 — December 2018) Python version share over time, 4 (January 2016 — March 2019) PyPI Stats: See package download data for the past 180 days, without needing to sign up for BigQuery pypistats: A command-line tool to access data from PyPI Stats ","date":"4 November 2019","permalink":"https://hugovk.dev/blog/2019/python-version-share-over-time-5/","section":"Blog","summary":"","title":"Python version share over time, 5"},{"content":"January 2016 — March 2019 #To celebrate the release of Python 3.7.3 on 25th March 2019, and with under nine months left for Python 2, here’s some statistics showing how much different Python versions have been used over the past three years.\nHere’s the pip installs for all packages from the Python Package Index (PyPI), between January 2016 and March 2019:\npip #The package installer\nsix #Python 2 and 3 compatibility library\nNumPy #Scientific computing library\npytest #Testing framework\nCoverage.py #Code coverage testing\nPillow #Imaging library\nDjango #Web framework\nMatplotlib #2D plotting library\nFlake8 #Linter\nPylint #Linter\npylast #Interface to Last.fm\nHow #Statistics were collected using pypi-trends.py, a wrapper around pypinfo to fetch all monthly downloads from the PyPI database on Google BigQuery and save them as JSON files. Data was downloaded over several days as getting all months uses up a lot of free BigQuery quota. Then jsons2csv.py plots a chart using matplotlib. Raw JSON data is in the repo.\nSee also # Data Driven Decisions Using PyPI Download Statistics Python version share over time, 1 (January 2016 — June 2018) Python version share over time, 2 (January 2016 — October 2018) Python version share over time, 3 (January 2016 — December 2018) PyPI Stats: See package download data for the past 180 days, without needing to sign up for BigQuery pypistats: A command-line tool to access data from PyPI Stats ","date":"4 April 2019","permalink":"https://hugovk.dev/blog/2019/python-version-share-over-time-4/","section":"Blog","summary":"","title":"Python version share over time, 4"},{"content":"January 2016 — December 2018 #To celebrate the release of Python 3.7.2 on Christmas Eve 2018, and with under a year left for Python 2, here\u0026rsquo;s some statistics showing how much different Python versions have been used over the past three years.\nHere\u0026rsquo;s the pip installs for all packages from the Python Package Index (PyPI), between January 2016 and December 2018:\nFor the NumPy scientific computing library:\nFor the pytest testing framework:\nFor the Pillow imaging library:\nFor the Django web framework:\nFor the matplotlib 2D plotting library:\nFor the Pylint linter:\nAnd for the pylast interface to Last.fm:\nHow #Statistics were collected using pypi-trends.py a wrapper around pypinfo to fetch all monthly downloads from the PyPI database on Google BigQuery and save them as JSON files. Data was downloaded over several days as getting all months uses up a lot of free BigQuery quota. Then jsons2csv.py plots a chart using matplotlib. Raw JSON data is in the repo.\nSee also # Data Driven Decisions Using PyPI Download Statistics Python version share over time, 1 (January 2016 — June 2018) Python version share over time, 2 (January 2016 — October 2018) PyPI Stats: See package download data for the past 180 days, without needing to sign up for BigQuery pypistats: A command-line tool to access data from PyPI Stats ","date":"1 January 2019","permalink":"https://hugovk.dev/blog/2019/python-version-share-over-time-3/","section":"Blog","summary":"","title":"Python version share over time, 3"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/words/","section":"tags","summary":"","title":"words"},{"content":"Three bots have been collecting words from Twitter for the past year. \u0026nbsp;\nShort version:\nIn 2018, people on Twitter talked about the words stan, toxic, peoplekind, councel, beclowned, caucasity, kakistocracy, catastrofuck, shithole, bombogenesis, chucklefuck, trumpfuckery, clackwanker, wankpuffin, dipshittery, fucksicle, and fuckwangled.\u0026nbsp;\n\u0026nbsp;\nLong version:\nThey've looked for certain sentences and extracted the X.\n@lovihatibot -- \"I love/hate the word X\" @nixibot -- \"X is not/isn't/ain't a word\" @favibot -- \"X is my new favorite/favouriteword\" Combining and comparing the logs of all three, let's see the top words of 2018. Bold means a word wasn't in that chart in 2017.\nCombined output\nTotal in 2018: 81,695\njustice (980) irregardless (876) soon (696) no (684) love (636) mines (571) homophobia (506) moist (491) bae (434) clout (365) cunt (364) alot (354) nut (333) ain't (329) cock (324) forever (305) hurted (291) yolo (280) sexy (271) impossible (269) \u0026nbsp;\nlovihatibot nixibot favibot 2018 total: 41,092 2018 total: 33,078 2018 total: 7,525 soon (688) no (528) homophobia (494) moist (483) bae (420) clout (356) nut (333) cunt (332) cock (319) yolo (277) sexy (240) bitch (227) sorry (210) queer (205) stan (197) coochie (190) fuck (186) fate (182) diet (167) toxic (159) justice (975) irregardless (869) mines (565) love (501) alot (352) ain't (324) hurted (289) forever (259) impossible (249) conversate (230) loyalty (224) anyways (209) finna (154) stupider (153) t (149) usa (125) marriage (111) peoplekind (105) councel (105) funner (104) no (68) beclowned (59) caucasity (35) whore (32) kakistocracy (30) feckless (25) cockwomble (24) yikes (22) bitch (20) shithole (19) catastrofuck (17) kissy (16) bombogenesis (15) oof (15) cunt (15) chucklefuck (14) trumpfuckery (14) wankpuffin (12) dipshittery (11) fuck (11) Here's top 10 charts for each phrase from each bot.\u0026nbsp;\n@lovihatbot I love the word X I hate the word X cunt (245) fuck (173) fate (167) bitch (147) play (145) moist (99) choice (68) whore (55) cock (47) queer (47) soon (648) homophobia (492) no (489) bae (417) moist (384) clout (351) nut (330) yolo (277) cock (272) sexy (234) @nixibot X is not a word X isn't a word X ain't a word irregardless (738) mines (535) love (437) forever (259) hurted (255) impossible (241) alot (241) conversate (196) loyalty (162) anyways (156) justice (964) irregardless (125) ain't (112) alot (109) stupider (59) anyways (51) just (51) happeh (49) love (49) usa (46) ain't (150) loyalty (23) funk (19) love (15) unlonely (15) is (13) ignorantest (8) finna (6) irregardless (6) shit (5) @favibot X is my new favorite word X is my new favourite word no (59) beclowned (54) caucasity (27) kakistocracy (26) whore (25) feckless (21) yikes (20) shithole (18) cockwomble (15) bombogenesis (13) catastrofuck (14) cockwomble (8) caucasity (8) kissy (8) clackwanker (7) no (7) wankpuffin (7) fucksicle (7) fuckwangled (7) bitch (6) Previous years See the words from 2017, 2016,\u0026nbsp;2015,\u0026nbsp;2014\u0026nbsp;and\u0026nbsp;2013.\n2019 For words causing a reaction in 2019, follow @lovihatibot,\u0026nbsp;@nixibot\u0026nbsp;and\u0026nbsp;@favibot\u0026nbsp;on Twitter.\n","date":"31 December 2018","permalink":"https://hugovk.dev/blog/2018/twitter-woty-2018/","section":"Blog","summary":"","title":"Words of the year from Twitter, 2018"},{"content":"January 2016 — October 2018 #To celebrate the release of Python 3.7.1 on 20th October 2018, here’s some statistics showing how much different Python versions have been used over the past two and five-sixths years.\nHere\u0026rsquo;s the pip installs for all packages from the Python Package Index (PyPI), between January 2016 and October 2018:\npip installs from PyPI over time, by Python version For the NumPy scientific computing library:\nNumpy's pip installs from PyPI over time, by Python version For the Pillow imaging library:\nPillow's pip installs from PyPI over time, by Python version For the Django web framework:\npylast's pip installs from PyPI over time, by Python version And for the pylast interface to Last.fm:\nPillow's pip installs from PyPI over time, by Python version How #Statistics were collected using pypi-trends.py, a wrapper around pypinfo to fetch all monthly downloads from the PyPI database on Google BigQuery and save them as JSON files. Data was downloaded over several days as getting all months uses up a lot of free BigQuery quota. Then jsons2csv.py plots a chart using matplotlib. Raw JSON data is in the repo.\nSee also # Data Driven Decisions Using PyPI Download Statistics Python version share over time, 1 (January 2016 — June 2018) PyPI Stats: See package download data for the past 180 days, without needing to sign up for BigQuery pypistats: A command-line tool to access data from PyPI Stats ","date":"3 November 2018","permalink":"https://hugovk.dev/blog/2018/python-version-share-over-time-2/","section":"Blog","summary":"","title":"Python version share over time, 2"},{"content":"January 2016 — June 2018 #To celebrate the release of Python 3.7 on 27th June 2018, here’s some statistics showing how much different Python versions have been used over the past two and a half years.\nHere\u0026rsquo;s the pip installs for all packages from the Python Package Index (PyPI), between January 2016 and June 2018:\npip installs from PyPI over time, by Python version And for the Pillow imaging library:\nPillow's pip installs from PyPI over time, by Python version How #Statistics were collected using pypi-trends.py, a wrapper around pypinfo to fetch all monthly downloads from the PyPI database on Google BigQuery and save them as JSON files. Data was downloaded over three or four days as getting all months uses up a lot of free BigQuery quota. Then jsons2csv.py converts them into a single CSV file for chart-wrangling in Excel. Raw CSV and JSON data is in the repo.\nSee also #Paul Kehrer fetched similar stats from BigQuery in December 2016, writing in Data Driven Decisions Using PyPI Download Statistics:\nData ingestion into the BigQuery data set was spotty prior to June 2016*, but you can see a significant uptick in Python 3 based downloads over 2016. If these trends continue…\n* But it shouldn’t be biased, so these percentages are likely to be accurate.\n","date":"5 July 2018","permalink":"https://hugovk.dev/blog/2018/python-version-share-over-time-1/","section":"Blog","summary":"","title":"Python version share over time, 1"},{"content":"Three bots have been collecting words from Twitter for the past year. \u0026nbsp;\nShort version:\nIn 2017, people on Twitter talked about the words broflake, caucacity, cockwomble, covfefe, dotard, douchecanoe, dracarys, shitgibbon, shooketh, twatwaffle, and woke.\u0026nbsp;\n\u0026nbsp;\nLong version:\nThey've looked for certain sentences and extracted the X.\n@lovihatibot -- \"I love/hate the word X\" @nixibot -- \"X is not/isn't/ain't a word\" @favibot -- \"X is my new favorite/favouriteword\" Combining and comparing the logs of all three, let's see the top words of 2017. Bold means a\u0026nbsp;word wasn't in that chart in 2016.\nCombined output\nTotal in 2017: 120,412\nforever (2,828) mines (1,687) no (1,161) love (1,092) justice (1,072) ain't (1,038) irregardless (1,027) bae (1,002) moist (891) homophobia (856) soon (811) loyalty (594) conversate (593) finna (566) bigly (551) impossible (526) cunt (500) alot (495) sorry (449) nut (441) \u0026nbsp;\nlovihatibot nixibot favibot 2017 total: 55,063 2017 total: 50,050 2017 total: 9,314 bae (950) no (941) moist (880) homophobia (854) soon (791) cunt (441) nut (435) lit (398) sexy (392) sorry (377) bitch (345) cock (339) yolo (298) panties (292) shook (267) woke (262) love (249) clout (248) daddy (242) hate (239) forever (2,699) mines (1,666) justice (1,072) ain't (1,017) irregardless (1,014) love (841) loyalty (587) conversate (586) bigly (522) impossible (501) alot (493) finna (463) anyways (385) hurted (271) stupider (251) covfefe (246) funner (245) marriage (203) worser (202) stupidest (183) mania (255) dotard (133) covfefe (102) no (95) yikes (48) cockwomble (35) shooketh (34) cunt (33) serendipity (30) caucacity (25) bitch (24) shitgibbon (23) dracarys (22) broflake (20) wow (19) twatwaffle (19) totality (17) headass (17) thrussy (16) douchecanoe (16) Here's top 10 charts for each phrase from each bot.\u0026nbsp;\n@lovihatbot I love the word X I hate the word X cunt (293) fuck (218) fate (197) bitch (178) moist (143) play (128) spooky (71) love (66) choice (62) free (60) bae (932) no (893) homophobia (851) soon (770) moist (737) nut (431) sexy (380) lit (379) sorry (370) cock (305) @nixibot X is not a word X isn't a word X ain't a word forever (2,683) mines (1,153) irregardless (765) love (598) impossible (454) loyalty (398) conversate (392) bigly (347) alot (307) finna (288) justice (1,057) mines (466) ain't (412) irregardless (242) love (223) alot (185) conversate (184) anyways (176) bigly (171) cant (149) ain't (390) finna (58) loyalty (53) mines (47) ignorantest (26) is (22) love (20) shit (17) just (15) worser (11) @favibot X is my new favorite word X is my new favourite word mania (255) dotard (110) no (87) covfefe (80) yikes (40) cunt (25) serendipity (23) shooketh (22) caucacity (22) cockwomble (20) dotard (20) covfefe (18) cockwomble (15) shooketh (11) no (7) nonce (7) muggy (6) wow (6) serendipity (6) yikes (5) Previous years See the words from\u0026nbsp;2016,\u0026nbsp;2015,\u0026nbsp;2014\u0026nbsp;and\u0026nbsp;2013,\n2018 For words causing a reaction in 2018, follow\u0026nbsp;@lovihatibot,\u0026nbsp;@nixibot\u0026nbsp;and\u0026nbsp;@favibot\u0026nbsp;on Twitter.\n","date":"30 December 2017","permalink":"https://hugovk.dev/blog/2017/twitter-woty-2017/","section":"Blog","summary":"","title":"Words of the year from Twitter, 2017"},{"content":"Three bots have been collecting words from Twitter for the past year. They've looked for certain sentences and extracted the X.\n@lovihatibot -- \"I love/hate the word X\" @nixibot -- \"X is not/isn't/ain't a word\" @favibot -- \"X is my new favorite/favourite/fave word\" Combining and comparing the logs of all three, let's see the top words of 2016. Bold means a\u0026nbsp;word wasn't in that chart in 2015.\nCombined output\nTotal in 2016: 168,241\nmines (4,060) bae (3,369) no (2,582) forever (2,143) lit (2,005) moist (1,805) love (1,790) bigly (1,488) conversate (1,358) ain't (1,339) irregardless (1,204) homophobia (1,186) justice (1,138) loyalty (985) soon (886) cunt (869) impossible (787) sorry (781) family (766) finna (674) \u0026nbsp;\nlovihatibot nixibot favibot 2016 total:\u0026nbsp;85,828 2016 total: 71,609 2016\u0026nbsp;total: 10,807 bae (3,242) no (2,209) lit (1,934) moist (1,788) homophobia (1,182) soon (851) cunt (798) sorry (692) panties (575) sexy (524) bitch (516) nut (509) slay (496) daddy (495) cock (462) baby (432) babe (430) pussy (425) hate (415) love (402) mines (4,035) forever (2,003) love (1,387) conversate (1,345) bigly (1,341) ain't (1,296) irregardless (1,186) justice (1,134) loyalty (961) impossible (752) family (732) anyways (547) finna (526) 4ever (508) alot (448) funner (445) worser (421) stupider (367) hurted (319) marriage (301) no (109) bigly (102) yikes (91) shook (42) cunt (41) braggadocious (37) shenanigans (34) bragadocious (32) wow (31) malarkey (30) bitch (30) headass (29) lit (28) savage (26) tragic (25) bougie (25) petty (22) cockwomble (22) finesse (21) soon (20) Here's top 10 charts for each phrase from each bot.\u0026nbsp;\n@lovihatbot I love the word X I hate the word X cunt (475) delicious (315) fuck (307) moist (242) fate (219) bitch (216) play (127) baby (114) babe (109) lit (94) bae (3,208) no (2,135) lit (1,840) moist (1,546) homophobia (1,181) soon (808) sorry (689) panties (551) sexy (507) nut (494) @nixibot X is not a word X isn't a word X ain't a word mines (2,679) forever (1,981) love (943) irregardless (890) conversate (880) bigly (837) impossible (678) loyalty (636) 4ever (507) finna (325) mines (1,283) justice (1,124) family (721) ain't (528) bigly (473) conversate (441) love (391) irregardless (281) anyways (270) stupider (259) ain't (509) loyalty (121) mines (73) finna (63) ignorantest (56) love (53) impossible (32) bigly (31) is (28) conversate (24) @favibot X is my new favorite word X is my new favourite word X is my new fave word no (98) bigly (93) yikes (65) shook (32) cunt (29) braggadocious (28) bragadocious (28) shenanigans (27) wow (27) malarkey (26) cockwomble (19) yikes (16) dampfnudel (11) cunt (10) savage (10) no (9) bigly (9) wankpuffin (8) braggadocious (7) shenanigans (7) yikes (10) shook (5) tragic (5) soon (4) nunty (4) yo (3) bitch (3) wow (3) malarkey (3) ganern (2) Changes from\u0026nbsp;past years Let's see how mentions have changed for some previous years' words.\u0026nbsp;\nPeople talking about words ‒\u0026nbsp;especially new favourite \u0026nbsp;words, or loved words, or hated words, or words they've decided don't exist ‒\u0026nbsp;may be a good indicator of brand new words or at least words with new currency.\u0026nbsp;Both increases and decreases may reflect an underlying change in use, and decreases may reflect an acceptance of the words.\nThe words from 2013 and\u0026nbsp;2014\u0026nbsp;have all more or less tailed off.\nThe words from 2013 and\u0026nbsp;2014\u0026nbsp;have all more or less tailed off.\nFrom 2015, lit is still being talked about. It's commonly used as\u0026nbsp;\"lit af\", or \"lit as fuck\", for example\u0026nbsp;in this tweet:\nMy Year is starting off lit af👌🏼 ...but is gonna be TD by Monday morning\nSomething, I'm not sure what, happened in June 2015 that caused its use to explode on Twitter:\nFam\u0026nbsp;(from family, for those closest to you but not necessarily family), has been around a long time, peaked in January 2015 and has tailed off.\nSimilarly, slay\u0026nbsp;(\"killed it. succeeded in something amazing\", \"something you tell someone when they look sexy as f***\") has been around for a while and was talked about in 2016 as well.\nNew in 2016 2016's words have been dominated by those from the US presidential elections, such as braggadocious (and bragadocious, \"boastful or arrogant\"), shenanigans (\"secret or dishonest activity or maneuvering\") and malarkey (\"meaningless talk; nonsense\"), but most notably by bigly (or \"big league\"):\nAnother with a very recent peak is headass:\n2017 For words causing a reaction in 2017, follow\u0026nbsp;@lovihatibot,\u0026nbsp;@nixibot\u0026nbsp;and\u0026nbsp;@favibot\u0026nbsp;on Twitter.\n","date":"5 January 2017","permalink":"https://hugovk.dev/blog/2017/twitter-woty-2016/","section":"Blog","summary":"","title":"Words of the year from Twitter, 2016"},{"content":"Here\u0026rsquo;s some quick charts of some of the words nominated for American Dialect Society 2015 Words of the Year PDF), data taken from a corpus of words talked about on Twitter (read more about them here), as collected by a trio of bots. Notable troughs are generally when the bots were offline.\nsquad fuckboy af lit fleek From my 2015 nominations: #Lit, fleek: see above.\nfam slay And for my 2013 nominations see here.\n","date":"8 January 2016","permalink":"https://hugovk.dev/blog/2016/woty15-nominations/","section":"Blog","summary":"","title":"#woty15 nominations"},{"content":"Three bots have been collecting words from Twitter for the past year. They've looked for certain sentences and extracted the X.\n@lovihatibot -- \"I love/hate the word X\" @nixibot -- \"X is not/isn't/ain't a word\" @favibot -- \"X is my new favorite/favourite/fave word\" Combining and comparing the logs of all three, let's see the top words of 2015. Bold means a word wasn't in that chart in 2014.\nCombined output\n2015 total: 219,918\nbae (9,513) mines (4,282) no (4,239) love (2,353) moist (2,345) lit (2,184) loyalty (1,984) ain't (1,725) conversate (1,664) fleek (1,525) justice (1,470) soon (1,420) impossible (1,306) homophobia (1,276) cunt (1,258) year (1,219) forever (1,214) fam (1,149) sorry (1,114) panties (1,060) lovihatibot nixibot favibot 2015 total: 125,867 2015 total: 81,960 2015 total: 13,976 bae (9,151) no (4,004) moist (2,341) lit (2,107) soon (1,409) homophobia (1,278) fleek (1,274) cunt (1,182) fam (1,077) panties (1,069) sorry (1,014) fuckboy (941) bitch (880) sexy (860) babe (815) slay (771) thot (758) pussy (706) fuck (698) love (672) mines (4,299) loyalty (2,000) love (1,702) ain't (1,678) conversate (1,661) justice (1,472) impossible (1,283) year (1,226) irregardless (1,027) forever (953) funner (717) worser (641) bestest (517) marriage (514) anyways (507) alot (496) hurted (443) stupider (442) conversating (426) bae (413) rendezvous (165) no (119) lit (97) savage (83) yikes (82) fuckboy (81) cunt (60) fam (50) twat (42) sensational (37) bitch (37) fuck (37) fuckery (29) tragic (29) irrelevant (27) wow (26) kerfuffle (23) groovy (22) rad (22) hoe (21) Here's top 10 charts for each phrase from each bot.\n@lovihatbot I love the word X I hate the word X cunt (1,253) fuck (1,075) bae (1,029) thot (700) bitch (661) babe (497) woman (323) moist (309) delicious (295) rad (269) bae (22,926) no (6,274) thot (6,155) moist (2,967) homophobia (2,052) soon (1,700) panties (1,671) selfie (1,506) sorry (1,446) sexy (1,281) @nixibot X is not a word X isn't a word X ain't a word mines (2,682) loyalty (1,622) impossible (1,159) love (1,154) conversate (1,101) forever (909) irregardless (774) year (689) marriage (422) worser (355) mines (1,483) justice (1,454) ain't (722) year (530) conversate (523) love (475) funner (423) bestest (342) stupider (303) worser (254) ain't (611) loyalty (152) ignorantest (115) mines (79) love (60) impossible (51) just (43) conversate (29) worser (27) bestest (26) @favibot X is my new favorite word X is my new favourite word X is my new fave word no (109) rendezvous (97) lit (83) yikes (64) savage (61) fuckboy (54) cunt (44) fam (43) fuck (31) sensational (29) rendezvous (60) fuckboy (22) savage (18) cockwomble (16) cunt (14) yikes (13) twat (11) lit (11) sassy (9) hunty (8) nondindwa (8) rendezvous (8) wow (7) yikes (5) twat (5) tragic (5) fuckboy (5) problematic (4) dope (4) savage (4) Change from 2013 Let's see how mentions have changed for some of 2013's words.\nPeople talking about words ‒ especially new favourite words, or loved words, or hated words, or words they've decided don't exist ‒ may be a good indicator of brand new words or at least words with new currency. Both increases and decreases may reflect an underlying change in use, and decreases may reflect an acceptance of the words.\nBae (babe) emerged in April 2013, peaked at 3,880 in May 2014 and whilst still popular, has tailed off to 437 by December 2015.\nSimilarly, thot (\"that hoe over there\") emerged in March 2013 and grew steadily to a peak of 1,400 uses in March 2014 and dropped off to 28 by December 2015. Selfie (a shared photo taken with a phone) had a couple of mentions in April 2013, and peaked in March 2014 with 373, ending the year with 18 in December 2015.\nRatchet (a diva) peaked with 130 in March 2014, dropping to 4 by December 2015. All but *ratchet* still show up in the charts.\nChanges from 2014 From 2014:\nFleek, or more fully on fleek, means on point, on the mark, stylish, amazing or impeccable. First mentioned in August 2014, it's dropped off to 14 by December 2015.\nBruh (bro, brother), not a new word but with just a few mentions throughout 2013, picked up in March 2014, and peaked in June/July 2014, but went down to 16 by December 2015 and doesn't make the top charts.\nFuckboy still charts for favibot, but peaked in March 2015 with 202 and down to 37 by year end.\nBoth hella and twizzle have dropped off the charts, the latter being a one-off from the 2014 winter Olympics.\nNew in 2015 Here's a few new to these charts.\nLit is the surprise new entry. It's commonly used as \"lit af\", or \"lit as fuck\", for example in this tweet:\nMy Year is starting off lit af👌🏼 ...but is gonna be TD by Monday morning\nSomething, I'm not sure what, happened in June 2015 that caused its use to explode on Twitter:\nFam (from family, for those closest to you but not necessarily family), has been around a long time, became popular towards the end of 2014 and is still talked about.\nSimilarly, slay (\"killed it. succeeded in something amazing\", \"something you tell someone when they look sexy as f***\") has been around for a while and grew towards the end of 2014, peaking in April 2015.\n2016 For words causing a reaction in 2016, follow @lovihatibot, @nixibot and @favibot on Twitter.\n","date":"2 January 2016","permalink":"https://hugovk.dev/blog/2016/twitter-woty-2015/","section":"Blog","summary":"","title":"Words of the year from Twitter, 2015"},{"content":"David-Antoine Williams writes:\nWhat is the difference between a catch-all and a catch-phrase? Both are compounds formed as Verb+Noun, but in catch-all, the noun is the direct object of the verb, whereas in catch-phrase it is the subject. That is, a catch-all is something that catches all things, whereas a catch-phrase is not something that catches phrases – it is a phrase that catches something. Get it?\nRecently there has been some discussion of catch-all type compounds, which Brianne Hughes has named “cutthroat compounds,” after one of the more suggestive of these. Apparently they’re rare, because they violate a general tendency for compounds in English to put the ‘head’ (e.g. phrase) on the right (‘right-headedness’). Compare F. ouvre-bouteille to E. bottle-opener (not open-bottle), which follows the most common English productive pattern, Object-Verb+er. If catch-all had followed the normal pattern, we’d be talking about an all-catcher, as we talk about dog-catchers and wind-catchers.\nD-AW went on to write a script that unlurked some cutthroats, searching for verbs with left-headed combinations recorded in the entry. I decided to write a script to try another approach -- look for hyphenated nouns where the first part can a verb and the second a noun.\nA WordNet list of 117,953 nouns was reduced to just 3,937 hyphenated words, then further reduced to 916 verb-nouns (i.e. a single hyphen, no spaces) via the Wordnik API, then manually whittled down. Of these potential cutthroats, the following aren't yet on Brianne's list:\nbe-all cease-fire counter-revolution counter-sabotage cross-classification cross-division cross-eye cross-purpose cross-question cross-stitch dangle-berry dash-pot do-good drop-leaf end-all fuss-budget knock-knee make-work squint-eye sweep-second I've been generous with some of these, some might originally be adjective-noun but can also be seen as verb-noun: it can be argued counter-revolutions are things that counters revolutions, cross-questions are things (also questions) that cross other questions (there are more counter- and cross- words like this). Some might just be wrong, but here they are.\nHere's the ones it found that are already on Brianne's list:\nbreak-axe cure-all do-nothing drop-seed know-all make-peace rest-harrow save-all shove-ha'penny, shove-halfpenny shut-eye spend-all And in case I missed any, the full list of 916 verb-nouns is here alongside the Python script.\n","date":"26 May 2015","permalink":"https://hugovk.dev/blog/2015/cutthroat-verb-nouns/","section":"Blog","summary":"","title":"Cutthroat verb-nouns"},{"content":"Strong Language, the swearing blog, recently wrote about Clusterboinks and clusterfornications: The children of clusterfuck.\nThree of my Twitter bots have been collecting words from Twitter since 2013. They\u0026#39;ve looked for certain sentences and extracted the X.\n@lovihatibot -- \u0026quot;I love/hate the word X\u0026quot; @nixibot -- \u0026quot;X is not/isn\u0026#39;t/ain\u0026#39;t a word\u0026quot; @favibot -- \u0026quot;X is my new favorite/favourite/fave word\u0026quot; Here\u0026#39;s the clusterfuck variants they\u0026#39;ve found:\nclustercoitus clustercuss clusterduck clusterfarf clusterfark clusterfoops clusterfox clusterfucked clusterfuckery clusterfudge clustermindfuck clusterwhoops ","date":"26 May 2015","permalink":"https://hugovk.dev/blog/2015/clusterstuff/","section":"Blog","summary":"","title":"Clusterstuff"},{"content":"EngLangBlog offered some man-words\u0026nbsp;and asked for more.\nThree bots have been collecting words from Twitter since 2013. They've looked for certain sentences and extracted the X.\n@lovihatibot -- \"I love/hate the word X\" @nixibot -- \"X is not/isn't/ain't a word\" @favibot -- \"X is my new favorite/favourite/fave word\" In alphabetical order, here's all the words they've found starting with man:\nman man's manaconda manage manageable management manager managerial managering managerish managership manaita manaka manana manarchism manarchist manarchists manbaby manband manboat manboob manbun mancake mancandy mancave mancer manchacha manchester manchild mand mandals mandate mandated mandation mandatory mandelfie mandem mandemz manderstand mandingo manditorium mandolized mandy mane manegment maneurysms maneuver manfant manfetti manfidence manflu manfriend mang manga mangaks manganèse mangape mangela mangerines mangia mangificent mangify mangina mangirrrling mangled mango mangos mangosteen mangrove manguish mangy mangyari manhi manhole manhood manhunt mania maniac maniacal maniacally manic manically manicle manicorn manier maniest manifest manifestate manifestating manifestation manifesto manigga manikan manikin manila manilla manimal manimony maninism manipul8te manipulable manipulate manipulated manipulation manipulative manipulatives manipulize manish manism mank manke mankey mankind mankles manky manlet manliest manlihood manlike manliner manliness manly manlyer manlyness mannaman mannequin manner mannerable mannerful mannerible mannerism mannerisms manners mannish mannitol manniversary mannn mannnnn manny manophobe manosphere manpad manpain manparts manpussy manraj mans manscaping manservant mansion manslaughter manslut mansome mansperience mansplain mansplained mansplaining manspread manstealer manstripper manstruating mant mantastic mantecado manter manther manties mantique mantitties mantlers mantra mantrum manufactroversy manufactured manufacturers manureisms manveries manwhore many manyer manyuchi manzelish manziel manzielish manzzzzzz \u0026nbsp;\nBreakdowns by bot \u0026nbsp; \"man[...]\u0026nbsp;is my favourite/favorite/fave word\" man manaconda manaka manarchism manarchist manboat mancake mancandy mancer manchacha manchild mandals mandate mandelfie mandem manderstand mandingo mandolized mandy mane maneurysms manfant manfetti mang manga manganèse mangela mangerines mangia mangify mangina mangirrrling mango mangosteen manguish manhole maniac maniacal manic manicorn manifest manifesto manigga manimal manipulative mankey manly mannaman manniversary mannn mannnnn manophobe manosphere manparts manraj mans manscaping mansperience mansplain mansplained mansplaining manspread manstealer manstripper manstruating mantastic manter manther manties mantique mantrum manufactroversy manureisms manveries many \u0026nbsp;\n\"I love the word man[...]\" man manarchists manbaby mancake mandate mandatory mandingo mane mang mangina mango mangrove mangy mangyari manhi manhole manhunt maniac maniacal maniacally manifest manifesto manila manilla manipul8te manipulate manipulated manky manlet mannequin manner mannnnn manpussy manservant manslaughter mansplain mansplained mantecado mantitties mantra manyer manyuchi manzzzzzz \u0026nbsp;\n\"I hate the word man[...]\" man manage management manager manband manboob manbun mancave manchester manchild mandals mandate mandated mandatory mandem mandemz mane manflu manfriend mang manga mangled mango manhole manhunt mania manifest manifestation manifesto manikin manila manilla manipulate mankind manky manliner manly manners mannish mannitol manpain manscaping mansion manslaughter mansplain mansplaining manufactured manufacturers manwhore many manziel \u0026nbsp;\n\"man[...] isn't/is not/ain't a word\" man man's manageable management manager managerial managering managerish managership manaita manana manband manbun mancave mand mandate mandation manditorium mane manegment maneuver manfidence mang manga mangaks mangape mangificent mangina mango mangos manhood maniac manic manically manicle manier maniest manifestate manifestating manikan manimony maninism manipulable manipulated manipulation manipulatives manipulize manish manism mank manke mankles manky manliest manlihood manlike manliness manly manlyer manlyness mannerable mannerful mannerible mannerism mannerisms mannish manny manophobe manosphere manpad mans manslut mansome mansplain mansplained mansplaining mant mantlers manwhore many manzelish manzielish ","date":"20 January 2015","permalink":"https://hugovk.dev/blog/2015/manwords/","section":"Blog","summary":"","title":"Manwords"},{"content":"Three bots have been collecting words from Twitter for the past year. They've looked for certain sentences and extracted the X.\n@lovihatibot -- \"I love/hate the word X\" @nixibot -- \"X is not/isn't/ain't a word\" @favibot -- \"X is my new favorite/favourite/fave word\" Combining and comparing the logs of all three, let's see what the top words of 2014 are.\nCombined output\n2014 total: 333,449\nbae (25,689) thot (7,787) no (6,888) mines (5,038) love (3,662) moist (3,305) impossible (3,092) ain't (2,960) loved (2,954) cunt (2,646) conversate (2,175) homophobia (2,064) loyalty (1,982) soon (1,767) panties (1,741) sorry (1,617) selfie (1,613) bitch (1,585) justice (1,542) babe (1,531) lovihatibot nixibot favibot 2014 total: 192,388 2014 total: 118,095 2014 total: 22,974 bae (23,955) thot (6,855) no (6,469) moist (3,276) cunt (2,487) homophobia (2,053) panties (1,738) soon (1,728) selfie (1,538) babe (1,494) bitch (1,454) sorry (1,454) sexy (1,318) fuck (1,175) swag (1,139) love (1,098) pussy (1,065) bruh (1,061) fleek (1,008) baby (860) mines (5,002) impossible (3,031) loved (2,942) ain't (2,812) love (2,560) conversate (2,154) loyalty (1,907) bae (1,585) justice (1,536) funner (1,496) irregardless (1,209) forever (1,122) worser (994) anyways (983) stupider (856) bestest (799) alot (753) thot (711) finna (707) marriage (683) thot (224) no (194) bruh (176) bae (151) twizzle (130) fuckboy (121) cunt (115) hella (106) rad (92) twat (84) sassy (83) bitch (74) fuck (64) irrelevant (64) slunt (58) wow (57) dingus (52) slay (49) swanky (49) yikes (47) Here's top 10 charts for each phrase from each bot.\u0026nbsp;\n@lovihatbot I love the word X I hate the word X cunt (1,253) fuck (1,075) bae (1,029) thot (700) bitch (661) babe (497) woman (323) moist (309) delicious (295) rad (269) bae (22,926) no (6,274) thot (6,155) moist (2,967) homophobia (2,052) soon (1,700) panties (1,671) selfie (1,506) sorry (1,446) sexy (1,281) @nixibot X is not a word X isn't a word X ain't a word mines (3,174) impossible (2,769) love (1,554) loved (1,517) conversate (1,395) loyalty (1,208) bae (1,127) forever (1,078) irregardless (922) anyways (602) mines (1,745) justice (1,529) loved (1,425) ain't (1,100) funner (888) love (878) conversate (715) stupider (589) bestest (538) bae (443) ain't (1,131) loyalty (380) ignorantest (314) love (128) mines (83) impossible (75) perfect (54) worser (45) just (44) conversate (44) @favibot X is my new favorite word X is my new favourite word X is my new fave word thot (187) no (177) bruh (145) twizzle (123) bae (111) fuckboy (96) cunt (82) hella (79) rad (65) bitch (61) sassy (45) bae (30) cunt (30) thot (26) quiche (23) bruh (21) rad (20) hella (20) twat (18) bitchachos (17) thot (11) bae (10) bruh (10) fuckboy (9) rad (7) sassy (7) bitchachos (7) puta (7) hella (7) literally (6) Change from 2013 Let's see how mentions have changed for some of 2013's words.\nPeople talking about words ‒\u0026nbsp;especially new favourite \u0026nbsp;words, or loved words, or hated words, or words they've decided don't exist ‒\u0026nbsp;may be a good indicator of brand new words or at least words with new currency.\u0026nbsp;Both increases and decreases may reflect an underlying change in use, and decreases may reflect an acceptance of the words.\nBae (babe)\u0026nbsp;emerged in April 2013, peaked at\u0026nbsp;3,880 in\u0026nbsp;May 2014 and tailed off to 1,602 by December. This is the stronger of the two. Neal Whitman\u0026nbsp;charts its ascent\u0026nbsp;and its use\u0026nbsp;throughout 2014\u0026nbsp;whilst James Hamblin\u0026nbsp;laments its death\u0026nbsp;since\u0026nbsp;brands have adopted it.\nSimilarly, thot\u0026nbsp;(\"that hoe over there\") emerged in March 2013 and grew steadily to a peak of 1,400 uses in March 2014 and dropped off to 162 by December.\u0026nbsp; Selfie\u0026nbsp;(a shared photo taken with one's own phone) had a couple of mentions in April 2013, and peaked in March 2014 with 373, ending the year with 86 in December.\nRatchet\u0026nbsp;(a diva) peaked with 130 in March 2014, dropping to 20 by December.\nNew in 2014 Here's a few new to these charts.\nFleek, or more fully\u0026nbsp;on fleek, means\u0026nbsp;on point, on the mark, stylish, amazing or impeccable. First mentioned in August 2014, it's still riding the peak. First used on\u0026nbsp;Vine by Peaches Monroe in June 2014, it was later popularised by Ariana Grande, who sang the Vine on MTV in August.\nBruh\u0026nbsp;(bro, brother), not a new word but with just a few mentions throughout 2013, picked up in March 2014, and peaked in June/July 2014. Use is likely\u0026nbsp;spurred on by its use in a\u0026nbsp;Vine clip\u0026nbsp;from May 2014 and in copied Vines:\nCallHimBzar took the clip, and a friend of his named Headgraphix, added a disappointed “bruh” as Farmer collapsed. The “bruh” is meant to imply, “bruh, you’re a 6’7, 220-lb guy, and you beat the shit out of your girlfriend, quit acting like a bitch.” The Vine quickly blew up, and after seeing all the excitement surrounding the Vine, Headgraphix and CallHimBzar started the #BruhMovement, encouraging others to make their own Bruh Vines. And Bruh Vine they did… to the \u0026nbsp;tune of\u0026nbsp;thousands\u0026nbsp;of Bruh vines.\nLikewise, fuckboy isn't new, but has seen increasing mentions. Know Your Meme says:\n“Fuckboy” used as a pejorative toward men who are perceived as oversexed or disrespectful toward women.\u0026nbsp;On Tumblr, the term has also spawned a derivative phrase “en garde (English: on your guard), fuckboy,\" which is often accompanied with images of skeletons in a similar vein to 2Spooky.\nIntensifier hella\u0026nbsp;saw some use in 2013, but it increased in 2014 peaking between February and August.\nFinally, twizzle was a one-off coinciding with the Sochi 2014 Winter Olympics. Virtually every mention was in February 2014 nearly all as a \"favorite word\" (with US spelling).\u0026nbsp;\nFanSided confirms the US connection to the Olympics:\nIf you have been watching figure skating throughout the 2014 Winter Olympics, it is impossible not to notice the term “twizzle” that is constantly being dropped by Tara Lipinksi and Johnny Weir throughout the Sochi Games.\n2015 For words causing a reaction in 2015, follow\u0026nbsp;@lovihatibot,\u0026nbsp;@nixibot\u0026nbsp;and\u0026nbsp;@favibot\u0026nbsp;on Twitter.\n","date":"6 January 2015","permalink":"https://hugovk.dev/blog/2015/twitter-woty-2014/","section":"Blog","summary":"","title":"Words of the year from Twitter, 2014"},{"content":"I wrote a Python script that searches Twitter for tweets containing \u0026ldquo;[X] is my new favourite word\u0026rdquo;. It then takes all those new favourite words, logs them, lowercases them, and adds them to a list of words on Wordnik. And, from this week, it also tweets them and makes word clouds.\nIt also does the same for \u0026ldquo;[X] is my new favorite word\u0026rdquo; and \u0026ldquo;[X] is my new fave word\u0026rdquo; so you can see some geographic variation.\nIt\u0026rsquo;s been going six months since 24th February 2013, runs nearly every day, and has found some 18,360 new favourite words.\nHere\u0026rsquo;s top tens for the whole set and each subset.\nThe whole data set contains 18,360 words and 10,018 unique words.\nThe top 10 words are:\nno (151) cunt (120) sassy (99) bitch (95) ratchet (87) fab (86) twat (73) cheeky (72) faggot (66) fuck (62) \u0026ldquo;New favorite words\u0026rdquo; contains 10,299 words and 5,964 unique words.\nThe top 10 words are:\nno (129) cunt (75) bitch (73) ratchet (55) thot (53) fuck (47) twat (41) sassy (38) fuckery (36) whatever (35) \u0026ldquo;New favourite words\u0026rdquo; contains 6,623 words and 4,505 unique words.\nThe top 10 words are:\nfab (50) sassy (50) cunt (41) cretin (36) cheeky (34) faggot (33) fabulous (32) twat (29) ratchet (24) serendipity (20) \u0026ldquo;New fave words\u0026rdquo; contains 1,436 words and 1,162 unique words.\nThe top 10 words are:\nfab (19) sassy (11) ratchet (8) cheeky (7) swaggot (7) cretin (7) coont (6) bastard (6) dope (6) dude (5) What does this tell us? I don\u0026rsquo;t know, but whilst the top ten contains lots of swearing, around half (or about 2/3 for favourites) of each list contains unique words. Browsing the lists shows lots of neologisms (and neoswearisms).\nThe word lists on Wordnik:\nhttps://www.wordnik.com/lists/twitter-favourites\nhttps://www.wordnik.com/lists/twitter-favorites\nhttps://www.wordnik.com/lists/twitter-faves\nFollow along:\nhttps://twitter.com/favibot\nSee word clouds:\nhttps://www.flickr.com/photos/hugovk/sets/72157636928894765/\nSee the script:\nhttps://github.com/hugovk/word-tools/blob/master/new_favourite_words.py\nInspired by:\nhttps://www.wordnik.com/lists/outcasts\n","date":"25 October 2013","permalink":"https://hugovk.dev/blog/2013/twitters-new-favourite-words/","section":"Blog","summary":"","title":"Twitter's new favourite words"},{"content":"According to Mabishu:\nAfter a lot of requests from Linux users, Spotify developers have integrated D-Bus support in version 0.4.8.282. So, what this means is simply and awesome! Now Linux developers could use this programmatic interface to interact with Spotify from other apps.\nIn other words, now is quite simple to send «play», «pause», «move next/previous song» events to Spotify and with this get Spotify fully integrate into our desktop.\nTo toggle playing and pausing from the terminal, run:\ndbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.PlayPause\nTo hook it to the Pause/Break keyboard key:\nSelect System -\u0026gt; Preferences -\u0026gt; Keyboard Shortcuts Click Add Enter any Name: Play or pause Spotify Paste in the Command: dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.PlayPause Click Apply Click Disabled on the right so it changes to New Shortcut\u0026hellip; Press the Pause/Break key Click Close Listen to music in Spotify and press the Pause/Break key to pause or play the music. See the Mabishu post to see how to check the other commands you can hook up to other keys.\n(Tested with Ubuntu 10.10 and Spotify for Linux preview 0.6.291)\n","date":"13 January 2012","permalink":"https://hugovk.dev/blog/2012/how-to-toggle-playingpausing-of-spotify-using-the-pause-key-in-ubuntu/","section":"Blog","summary":"","title":"How to toggle playing/pausing of Spotify using the Pause key in Ubuntu"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/music/","section":"tags","summary":"","title":"music"},{"content":"","date":null,"permalink":"https://hugovk.dev/tags/s60/","section":"tags","summary":"","title":"S60"},{"content":" KErrNone0 KErrNotFound -1Unable to find the specified object KErrGeneral -2General (unspecified) error KErrCancel -3The operation was cancelled KErrNoMemory -4Not enough memory KErrNotSupported -5The operation requested is not supported KErrArgument -6Bad request KErrTotalLossOfPrecision -7Total loss of precision KErrBadHandle -8Bad object KErrOverflow -9Overflow KErrUnderflow -10Underflow KErrAlreadyExists -11Already exists KErrPathNotFound -12Unable to find the specified folder KErrDied -13Closed KErrInUse -14The specified object is currently in use by another program KErrServerTerminated -15Server has closed KErrServerBusy -16Server busy KErrCompletion -17Completion error KErrNotReady -18Not ready KErrUnknown -19Unknown error KErrCorrupt -20Corrupt KErrAccessDenied -21Access denied KErrLocked -22Locked KErrWrite -23Failed to write KErrDisMounted -24Wrong disk present KErrEof -25Unexpected end of file KErrDiskFull -26Disk full KErrBadDriver -27Bad device driver KErrBadName -28Bad name KErrCommsLineFail -29Comms line failed KErrCommsFrame -30Comms frame error KErrCommsOverrun -31Comms overrun error KErrCommsParity -32Comms parity error KErrTimedOut -33Timed out KErrCouldNotConnect -34Failed to connect KErrCouldNotDisconnect -35Failed to disconnect KErrDisconnected -36Disconnected KErrBadLibraryEntryPoint -37Bad library entry point KErrBadDescriptor -38Bad descriptor KErrAbort -39Interrupted KErrTooBig -40Too big KErrDivideByZero -41Divide by zero KErrBadPower -42Batteries too low KErrDirFull -43Folder full KErrHardwareNotAvailable \u0026nbsp;-44 KErrSessionClosed -45 KErrPermissionDenied \u0026nbsp;-46 Original table of errors nabbed from http://newlc.com/Symbian-OS-Error-Codes.html\n","date":"5 February 2009","permalink":"https://hugovk.dev/blog/2009/symbian-errors-an-illustrated-guide/","section":"Blog","summary":"","title":"Symbian errors, an illustrated catalogue of errors"},{"content":"Another amazing application for S60 phones! (But not S60 3rd Ed.) Like all the best applications it has a hard-coded exchange rate and a rubbish UI!\nBooze It! is the perfect tool for those who like the odd drink or two. It has two modes: Home and Away.\nAway blurb #Ever been in a foreign pub drinking half a litre of beer (sometimes in a pint glass) and wondering what it would cost in proper money? Well, it\u0026rsquo;s easy enough to convert from euros to pounds, either in your head or with your phone\u0026rsquo;s converter app. But that only gives the price of a half litre when what you really want to know is how much a full British pint would set you back. Well, this is the app for you!\nKeys:\nType the price of the foreign draught with the number keys Up key increases the digit at the \u0026lsquo;imaginary cursor\u0026rsquo; Down key decreases the digit at the \u0026lsquo;imaginary cursor\u0026rsquo; Left/right keys move the \u0026lsquo;imaginary cursor\u0026rsquo; Send/green key: Send an SMS to tell your friends about your beer, you may edit before sending Press * to toggle between Home and Away modes Menu:\nGlass size: To change the size of the foreign draught. Select either preset sizes or enter your own size. Change rate: View the current exchange rate, or enter your own, with either euro or pound as the base. Note: the exchange rate isn\u0026rsquo;t stored and will be reset to the default when you exit\u0026hellip; Send via SMS: Send an SMS to tell your friends about your beer, you may edit before sending Send via Bluetooth: Share this amazing application with a friend! Home blurb #Picture the scene: you\u0026rsquo;re in an off licence or supermarket, choosing some booze for a party. It\u0026rsquo;s easy to see which is the cheapest, but which gives the most alcohol for your hard earned pound? You have to account for number of cans or bottles, volume in each, percentage, and price. Simply consult Booze It! to help Choose Your Booze!\nThe home mode currently has a very dodgy UI. Sorry. You have to imagine a cursor, and use the left and right keys to move the cursor to the digit you want to change. You then press up or down to increase or decrease the digit at the cursor.\nKeys:\nUp key increases the digit at the \u0026lsquo;imaginary cursor\u0026rsquo; Down key decreases the digit at the \u0026lsquo;imaginary cursor\u0026rsquo; Left/right keys move the \u0026lsquo;imaginary cursor\u0026rsquo; Send/green key: Send a booze report via SMS, you may edit before sending Press * to toggle between Home and Away modes Menu:\nSend via SMS: Send a booze report, you may edit before sending Send via Bluetooth: Share this amazing application with a friend! See more S60 stuff here.\n","date":"16 April 2007","permalink":"https://hugovk.dev/blog/2007/boozeit/","section":"Blog","summary":"","title":"Booze It!"},{"content":"These settings work for sending on the Nokia 6680, but not receiving\u0026hellip; I used to be able to receive as well, but at least sending works and means I can use the \u0026ldquo;Send as email\u0026rdquo; option in things like Lifeblog, and use Opera or the phone\u0026rsquo;s built-in Web app to check received email at gmail.com.\n","date":"13 June 2005","permalink":"https://hugovk.dev/blog/2005/gmail-on-series-60/","section":"Blog","summary":"","title":"Gmail on Series 60"},{"content":"And here\u0026rsquo;s a freeware big clock for your Series 60 phone :)\n","date":"30 May 2005","permalink":"https://hugovk.dev/blog/2005/big-clock/","section":"Blog","summary":"","title":"Series 60 Big Clock"},{"content":"After reading this and this and this I decided to knock up this dodgy prototype amazing application for S60 v2.x phones (but not v1.x or v3.x \u0026ndash; check your version here. Tap in some Morse code, and then send it as an SMS. Keys are:\n1, 4, 7, or * - Dot 2, 5, 8, or 0 - Space 3, 6, 9, or # - Dash Left arrow - Dot OK key - Space Right arrow - Dash C key - Delete last dot, dash or letter Call/green key - Send as SMS For a gap between letters, press space once. For a gap between words, press space a second time.\nHere\u0026rsquo;s the source (Google Code, GitHub), do whatever you want with it. Some ideas:\nAdd short and long key press handling on the OK key for dot and dash input, with proper timing to add character and word spaces Centre the Morse characters and make them bigger/bolder More ideas . / -. / .\u0026mdash; / \u0026mdash; / -.\u0026ndash; / -.-.\u0026ndash;\n","date":"30 May 2005","permalink":"https://hugovk.dev/blog/2005/morse-texter/","section":"Blog","summary":"","title":"Morse Texter"},{"content":"","date":null,"permalink":"https://hugovk.dev/categories/","section":"categories","summary":"","title":"categories"}]